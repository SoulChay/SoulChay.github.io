<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>22Cheney.</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-29T07:17:48.541Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Soulchay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>验证IP地址</title>
    <link href="http://example.com/2022/05/29/%E9%AA%8C%E8%AF%81IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://example.com/2022/05/29/%E9%AA%8C%E8%AF%81IP%E5%9C%B0%E5%9D%80/</id>
    <published>2022-05-29T07:19:00.000Z</published>
    <updated>2022-05-29T07:17:48.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>纪念一道 “非常没水平的题”。</p><p>今天是 2022.5.29，一个月没碰算法题目了，今天心血来潮想刷刷题目。</p><p>打开力扣每日一题，直接开干！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">468. 验证IP地址</span><br><span class="line">给定一个字符串 queryIP。如果是有效的 IPv4 地址，返回 &quot;IPv4&quot; ；如果是有效的 IPv6 地址，返回 &quot;IPv6&quot; ；如果不是上述类型的 IP 地址，返回 &quot;Neither&quot; 。</span><br><span class="line"></span><br><span class="line">有效的IPv4地址 是 “x1.x2.x3.x4” 形式的IP地址。 其中 0 &lt;= xi &lt;= 255 且 xi 不能包含 前导零。例如: “192.168.1.1” 、 “192.168.1.0” 为有效IPv4地址， “192.168.01.1” 为无效IPv4地址; “192.168.1.00” 、 “192.168@1.1” 为无效IPv4地址。</span><br><span class="line"></span><br><span class="line">一个有效的IPv6地址 是一个格式为“x1:x2:x3:x4:x5:x6:x7:x8” 的IP地址，其中:</span><br><span class="line">1. 1 &lt;= xi.length &lt;= 4</span><br><span class="line">2. xi 是一个 十六进制字符串 ，可以包含数字、小写英文字母( &#x27;a&#x27; 到 &#x27;f&#x27; )和大写英文字母( &#x27;A&#x27; 到 &#x27;F&#x27; )。</span><br><span class="line">3. 在 xi 中允许前导零。</span><br><span class="line">例如 &quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot; 和 &quot;2001:db8:85a3:0:0:8A2E:0370:7334&quot; 是有效的 IPv6 地址，而 &quot;2001:0db8:85a3::8A2E:037j:7334&quot; 和 &quot;02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot; 是无效的 IPv6 地址。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：queryIP = &quot;172.16.254.1&quot;</span><br><span class="line">输出：&quot;IPv4&quot;</span><br><span class="line">解释：有效的 IPv4 地址，返回 &quot;IPv4&quot;</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：queryIP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;</span><br><span class="line">输出：&quot;IPv6&quot;</span><br><span class="line">解释：有效的 IPv6 地址，返回 &quot;IPv6&quot;</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：queryIP = &quot;256.256.256.256&quot;</span><br><span class="line">输出：&quot;Neither&quot;</span><br><span class="line">解释：既不是 IPv4 地址，又不是 IPv6 地址</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode.cn/problems/validate-ip-address</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>好家伙，我一看就笑了，这不就是平时写程序的 <code>if + else if + else</code> 嘛，就这还中等题？ 面向应用编程是叭？</p><p>结果过了40多分钟我才进行第一次提交，1小时左右才AC，别问我那20分钟改什么了，只能说太粗心了😭。</p><p>而且我的代码，真的是又臭又长😑，贴上来给你们看看。。。</p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">validIPAddress</span><span class="params">(String queryIP)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(judgeIPv4(queryIP))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IPv4&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(judgeIPv6(queryIP))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;IPv6&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Neither&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judgeIPv4</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有3个点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pointCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;.&#x27;</span>) pointCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pointCnt != <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理前三个点前面的字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,index);</span><br><span class="line">            <span class="keyword">if</span>(!judge4(str1)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//更新str</span></span><br><span class="line">            str = str.substring(index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理第三个冒号后剩下的字符串</span></span><br><span class="line">        <span class="keyword">return</span> judge4(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge4</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="comment">//1.长度过长过短或者前置为0则返回false</span></span><br><span class="line">        <span class="keyword">if</span>(str.length() &lt; <span class="number">1</span> || str.length() &gt; <span class="number">3</span> || (str.length() &gt; <span class="number">1</span> &amp;&amp; str.indexOf(<span class="string">&quot;0&quot;</span>) == <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//2.判断每个字符是否都是数字</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>; m&lt;str.length(); m++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(m);</span><br><span class="line">            <span class="keyword">if</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.判断数字的范围是否合法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">strInt</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">        <span class="keyword">if</span>(strInt &lt; <span class="number">0</span> || strInt &gt; <span class="number">255</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judgeIPv6</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有7个冒号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pointCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;:&#x27;</span>) pointCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pointCnt != <span class="number">7</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理前七个冒号前面的字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,index);</span><br><span class="line">            <span class="keyword">if</span>(!judge6(str1)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//更新str</span></span><br><span class="line">            str = str.substring(index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理第三个冒号后剩下的字符串</span></span><br><span class="line">        <span class="keyword">return</span> judge6(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge6</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="comment">//1.长度过长则返回false</span></span><br><span class="line">        <span class="keyword">if</span>(str.length() &lt; <span class="number">1</span> || str.length() &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//2.判断每个字符是否都是数字或字母</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>; m&lt;str.length(); m++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(m);</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;F&#x27;</span>)&#123;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;f&#x27;</span>)&#123;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>说实话，这道题真的是出的”非常没水平”，但确实是我们在编写程序时最常遇到的情景，非常考验我们思维的缜密性。以我的代码作为反例，如果只追求满足需求就完事，而不考虑其他一些更优雅的方法，写的代码只会越来越 “Shit 山”。好嘞我要去改我的代码了，拜拜拜拜！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;纪念一道 “非常没水平的题”。&lt;/p&gt;
&lt;p&gt;今天是 2022.5.29，一个月没碰算法题目了，今天心血来潮想刷刷题目。&lt;/</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>学院项目的知识点巩固</title>
    <link href="http://example.com/2022/05/27/%E5%AD%A6%E9%99%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B7%A9%E5%9B%BA/"/>
    <id>http://example.com/2022/05/27/%E5%AD%A6%E9%99%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B7%A9%E5%9B%BA/</id>
    <published>2022-05-27T03:20:00.000Z</published>
    <updated>2022-05-29T11:06:25.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据库属性自动装配"><a href="#1-数据库属性自动装配" class="headerlink" title="1. 数据库属性自动装配"></a>1. 数据库属性自动装配</h2><p>自动注入插入时间和更新时间</p><p>在日常的开发过程中，DAO层的数据库实体类(Entity)中经常会有一些公共字段如 create_by(创建人)，create_time(创建时间) 等字段，与业务基本无关且属于记录本身的属性字段。这些字段通常会容易被大家忽视，每个 Entity 都去处理一遍比较麻烦耗时；如果忽略又会造成记录本身属性不完整。</p><p>可以使用 <code>MybatisPlus</code> 中的  <code>MetaObjectHandler</code> 来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于插入时对公共字段的填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于更新时对公共字段的填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动装配配置:自动注入插入时间和更新时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;gmtCreate&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Swagger-配置"><a href="#2-Swagger-配置" class="headerlink" title="2. Swagger 配置"></a>2. Swagger 配置</h2><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/educationOnline/1.png"></img></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建API</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">webApiConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">            <span class="comment">// 用来创建该API的基本信息，展示在文档的页面中（自定义展示的信息）</span></span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">            <span class="comment">// 设置哪些接口暴露给Swagger展示</span></span><br><span class="line">                .select()</span><br><span class="line">            <span class="comment">//错误路径不监控</span></span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加摘要信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">webApiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;SoulChay&quot;</span>, <span class="string">&quot;http://soulchay.com&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;1837522825@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-异常处理类"><a href="#3-异常处理类" class="headerlink" title="3. 异常处理类"></a>3. 异常处理类</h2><p>我们可以使用 <code>@ControllerAdvice</code> 配合 <code>@ExceptionHandler</code> 来设置处理全局异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//本质上是一个Component，作用是给Controller控制器添加统一的操作或处理。</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一般异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">error</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">&quot;执行全局异常处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SoulException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">error</span><span class="params">(GuliException e)</span>&#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error().code(e.getCode()).message(e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-GateWay-处理跨域"><a href="#4-GateWay-处理跨域" class="headerlink" title="4. GateWay 处理跨域"></a>4. GateWay 处理跨域</h2><p>可以使用 <code>@CrossOrigin</code> 来处理跨域，但是每个请求都添加一遍实在是太磨人，所以采用 GateWay 来处理跨域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决跨域问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许的请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求源 （如：http://localhost:8080）</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的请求方法 ==&gt; GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加URL映射，这里拦截一切请求</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>(<span class="keyword">new</span> <span class="title class_">PathPatternParser</span>());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于跨域配置会进行叠加，使用 GateWay 进行跨域处理后，需要关闭其他跨域的处理，不然前端会报错。 </p><h2 id="5-Cacheable-的使用"><a href="#5-Cacheable-的使用" class="headerlink" title="5. @Cacheable 的使用"></a>5. @Cacheable 的使用</h2><p>@Cacheable可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。</p><p>需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。</p><p>@Cacheable可以指定三个属性，value、key和condition。</p><p> value属性是必须指定的。其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(“cache1”)</span><span class="comment">//Cache是发生在cache1上的</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(&#123;“cache1”, “cache2”&#125;)</span><span class="comment">//Cache是发生在cache1和cache2上的</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>key属性是用来指定Spring缓存方法的返回结果时对应的key的。该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。</p><p>先来看看自定义策略。 自定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#id”)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#p0”)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#user.id”)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Cacheable(value=”users”, key=”#p0.id”)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上述使用方法参数作为key之外，Spring还为我们提供了一个 root 对象可以用来生成key。通过该root对象我们可以获取到以下信息。</p><table><thead><tr><th>属性名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>当前方法名</td><td>#root.methodName</td></tr><tr><td>method</td><td>当前方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>当前被调用的对象</td><td>#root.target</td></tr><tr><td>targetClass</td><td>当前被调用的对象的class</td><td>#root.targetClass</td></tr><tr><td>args</td><td>当前方法参数组成的数组</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>当前被调用的方法使用的Cache</td><td>#root.caches[0].name</td></tr></tbody></table><p>当我们要使用root对象的属性作为key时我们也可以将“#root”省略，因为Spring默认使用的就是root对象的属性。如：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value=&#123;“users”, “xxx”&#125;, key=”caches[1].name”)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(User user)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有的时候我们可能并不希望缓存一个方法所有的返回结果。通过condition属性可以实现这一功能。condition属性默认为空，表示将缓存所有的调用情形。其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下示例表示只有当user的id为偶数时才会进行缓存。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value=&#123;“users”&#125;, key=”#user.id”, condition=”#user.id%2==0”)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">find</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(“find user by user “ + user);</span><br><span class="line"> <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6. 分页查询"></a>6. 分页查询</h2><p>配置分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.soul.eduservice.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高版本的SpringBoot中, 会提示这种写法<b>已过时</b>, 所以采用另一种写法 <b>MybatisPlusInterceptor</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduTeacherServiceImpl</span> </span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EduTeacherMapper, EduTeacher&gt; <span class="keyword">implements</span> <span class="title class_">EduTeacherService</span> &#123;</span><br><span class="line">    <span class="comment">//分页查询讲师方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getTeacherFrontList</span><span class="params">(Page&lt;EduTeacher&gt; pageTeacher)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;EduTeacher&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        baseMapper.selectPage(pageTeacher,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;EduTeacher&gt; records = pageTeacher.getRecords();  <span class="comment">//获取当前页的数据</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> pageTeacher.getCurrent();  <span class="comment">//当前页码</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> pageTeacher.getPages();  <span class="comment">//page数量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageTeacher.getTotal();  <span class="comment">//获取总记录数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> pageTeacher.getSize();  <span class="comment">//page大小</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPrevious</span> <span class="operator">=</span> pageTeacher.hasPrevious();  <span class="comment">//是否还有上一页</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> pageTeacher.hasNext(); <span class="comment">//是否还有下一页</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把分页数据取出，放到map集合</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;items&quot;</span>,records);</span><br><span class="line">        map.put(<span class="string">&quot;pages&quot;</span>,pages);</span><br><span class="line">        map.put(<span class="string">&quot;current&quot;</span>,current);</span><br><span class="line">        map.put(<span class="string">&quot;total&quot;</span>,total);</span><br><span class="line">        map.put(<span class="string">&quot;size&quot;</span>,size);</span><br><span class="line">        map.put(<span class="string">&quot;hasNext&quot;</span>,hasNext);</span><br><span class="line">        map.put(<span class="string">&quot;hasPrevious&quot;</span>,hasPrevious);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Feign-远程调用"><a href="#7-Feign-远程调用" class="headerlink" title="7. Feign 远程调用"></a>7. Feign 远程调用</h2><p>实现模块A调用模块B的方法</p><p>①：导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--服务调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②：模块A：</p><p>启动类添加注解 <code>@EnableFeignClients</code> 启用 fegin 客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//nacos注册</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.soul&quot;&#125;)</span> <span class="comment">//添加扫描Config包的注解</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>  <span class="comment">//远程调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EduApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EduApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个客户端类来调用模块B的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;service-order&quot;,fallback = OrdersClientImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrdersClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据课程id和用户id查询订单表中订单状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/eduorder/order/isBuyCourse/&#123;courseId&#125;/&#123;memberId&#125;&quot;)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isBuyCourse</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> String courseId, <span class="meta">@PathVariable(&quot;memberId&quot;)</span> String memberId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③：模块B：</p><p>模块A所调用的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduorder/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据课程id和用户id查询订单表中订单状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;isBuyCourse/&#123;courseId&#125;/&#123;memberId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBuyCourse</span><span class="params">(<span class="meta">@PathVariable</span> String courseId,<span class="meta">@PathVariable</span> String memberId)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;Order&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;course_id&quot;</span>,courseId);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;member_id&quot;</span>,memberId);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;status&quot;</span>,<span class="number">1</span>);<span class="comment">//支付状态 1代表已经支付</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> orderService.count(wrapper);</span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>) &#123; <span class="comment">//已经支付</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-配置文件的读取"><a href="#8-配置文件的读取" class="headerlink" title="8. 配置文件的读取"></a>8. 配置文件的读取</h2><p>实现项目初始化时就对配置文件进行读取，需要实现 <code>InitializingBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取properties中所需的密钥等信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantPropertiesUtils</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123; <span class="comment">// 项目初始化时就对信息进行读取</span></span><br><span class="line">    <span class="comment">//读取配置文件内容</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keyId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keySecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义公开静态常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String END_POIND;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESSS_KEY_ID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESSS_KEY_SECRET;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        END_POIND = endpoint;</span><br><span class="line">        ACCESSS_KEY_ID = keyId;</span><br><span class="line">        ACCESSS_KEY_SECRET = keySecret;</span><br><span class="line">        BUCKET_NAME = bucketName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-设置定时任务"><a href="#9-设置定时任务" class="headerlink" title="9. 设置定时任务"></a>9. 设置定时任务</h2><p>①：在启动类上添加 <code>@EnableScheduling</code> 注解来开启定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.soul&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时任务</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.soul.staservice.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②：需要使用 <code>@Scheduled</code> 注解，Cron表达式可在 <a href="https://cron.qqe2.com/">在线Cron表达式生成器生成</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StatisticsDailyService staService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在每天凌晨1点，把前一天数据进行数据查询添加</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> &#123;</span><br><span class="line">        staService.registerCount(DateUtil.formatDate(DateUtil.addDays(<span class="keyword">new</span> <span class="title class_">Date</span>(), -<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-QQ邮箱的使用"><a href="#10-QQ邮箱的使用" class="headerlink" title="10. QQ邮箱的使用"></a>10. QQ邮箱的使用</h2><p>①：导入依赖并在配置文件里配置相关（password如何得到？你去Google一下呗）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#邮箱配置</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">1837522825@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">akigpratjvhdefbc</span></span><br><span class="line"><span class="attr">spring.mail.default-encoding</span>: <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><p>②：实现简单配置读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String emailFrom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmailFrom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> emailFrom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③：相关实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailConfig emailConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">sendSimpleMail</span><span class="params">(String sendTo)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            code.append((<span class="type">int</span>)(Math.random()*<span class="number">9</span>));<span class="comment">//随机生成六位数验证码</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;登录验证&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;您好，您的验证码为 : &quot;</span> + code;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> emailConfig.getEmailFrom();</span><br><span class="line"></span><br><span class="line">        message.setFrom(email);</span><br><span class="line">        message.setTo(sendTo);</span><br><span class="line">        message.setSubject(title);</span><br><span class="line">        message.setText(content);</span><br><span class="line"></span><br><span class="line">        mailSender.send(message);<span class="comment">//发送邮件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存到redis中</span></span><br><span class="line">        redisTemplate.opsForValue().set(email,code.toString(),<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">&quot;验证码已发送，5分钟内有效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-阿里云oss服务"><a href="#11-阿里云oss服务" class="headerlink" title="11. 阿里云oss服务"></a>11. 阿里云oss服务</h2><p>①：导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里云oss依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②：配置相关</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里云 OSS</span></span><br><span class="line"><span class="attr">aliyun.oss.file.endpoint</span>=<span class="string">#</span></span><br><span class="line"><span class="attr">aliyun.oss.file.keyid</span>=<span class="string">#</span></span><br><span class="line"><span class="attr">aliyun.oss.file.keysecret</span>=<span class="string">#</span></span><br><span class="line"><span class="attr">aliyun.oss.file.bucketname</span>=<span class="string">#</span></span><br></pre></td></tr></table></figure><p>③：代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OssService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传头像到oss</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFileAvatar</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">//获取工具类中的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> ConstantPropertiesUtils.END_POIND;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accesssKeyId</span> <span class="operator">=</span> ConstantPropertiesUtils.ACCESSS_KEY_ID;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accesssKeySecret</span> <span class="operator">=</span> ConstantPropertiesUtils.ACCESSS_KEY_SECRET;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> ConstantPropertiesUtils.BUCKET_NAME;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建OSS实例</span></span><br><span class="line">            <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accesssKeyId, accesssKeySecret);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传文件流</span></span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="comment">//在每个文件名前添加随机唯一数值 ---&gt; 防止因文件名相同被覆盖</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//把文件按照日期分类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>().toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">            originalFilename = dateStr + <span class="string">&quot;/&quot;</span> +uuid + originalFilename;</span><br><span class="line"></span><br><span class="line">            ossClient.putObject(bucketName, originalFilename, inputStream);</span><br><span class="line"></span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把上传的文件路径进行拼接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint + <span class="string">&quot;/&quot;</span> + originalFilename;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-阿里云视频点播服务"><a href="#12-阿里云视频点播服务" class="headerlink" title="12. 阿里云视频点播服务"></a>12. 阿里云视频点播服务</h2><p>①：引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②：配置相关</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里云 vod</span></span><br><span class="line"><span class="attr">aliyun.oss.file.endpoint</span>=<span class="string">#</span></span><br><span class="line"><span class="attr">aliyun.oss.file.bucketname</span>=<span class="string">#</span></span><br><span class="line"><span class="attr">aliyun.vod.file.keyid</span>=<span class="string">#</span></span><br><span class="line"><span class="attr">aliyun.vod.file.keysecret</span>=<span class="string">#</span></span><br></pre></td></tr></table></figure><p>②：上传视频到阿里云</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">VodService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传视频</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadVideo</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="type">UploadStreamRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadStreamRequest</span>(ConstantVodUtils.ACCESS_KEY_ID,</span><br><span class="line">                    ConstantVodUtils.ACCESS_KEY_SECRET, title, fileName, inputStream);</span><br><span class="line">            <span class="type">UploadVideoImpl</span> <span class="variable">uploader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadVideoImpl</span>();</span><br><span class="line">            <span class="type">UploadStreamResponse</span> <span class="variable">response</span> <span class="operator">=</span> uploader.uploadStream(request);</span><br><span class="line">            <span class="type">String</span> <span class="variable">videoId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">                videoId = response.getVideoId();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果设置回调URL无效，不影响视频上传，可以返回VideoId同时会返回错误码。其他情况上传失败时，VideoId为空，此时需要根据返回错误码分析具体错误原因</span></span><br><span class="line">                System.out.print(<span class="string">&quot;VideoId=&quot;</span> + response.getVideoId() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                System.out.print(<span class="string">&quot;ErrorCode=&quot;</span> + response.getCode() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                System.out.print(<span class="string">&quot;ErrorMessage=&quot;</span> + response.getMessage() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> videoId;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/pengzhisen123/article/details/94409825">Spring之缓存注解@Cacheable</a></p><p><a href="https://blog.csdn.net/qq_41359651/article/details/112260207">Mybatis-Plus中分页插件PaginationInterceptor， MybatisPlusInterceptor在SpringBoot中的使用</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-数据库属性自动装配&quot;&gt;&lt;a href=&quot;#1-数据库属性自动装配&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库属性自动装配&quot;&gt;&lt;/a&gt;1. 数据库属性自动装配&lt;/h2&gt;&lt;p&gt;自动注入插入时间和更新时间&lt;/p&gt;
&lt;p&gt;在日常的开发过程中，D</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>nvm 的安装和使用</title>
    <link href="http://example.com/2022/05/22/nvm%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2022/05/22/nvm%E6%8C%87%E4%BB%A4/</id>
    <published>2022-05-22T01:19:00.000Z</published>
    <updated>2022-05-24T03:25:42.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1. 写在前面"></a>1. 写在前面</h2><p>之前学习了网上一个项目，使用的 node 是 <code>10.14.1</code> 版本的，而部署博客则需要更高版本的 node ，如果每次部署项目和部署博客都要卸载一个版本的 node 下载另一个版本的 node ，真的是太麻烦了。于是在网上找可以管理 node 的工具 nvm。这里使用的是 <code>nvm-windows</code> 的版本。</p><h2 id="2-nvm-下载与安装"><a href="#2-nvm-下载与安装" class="headerlink" title="2. nvm 下载与安装"></a>2. nvm 下载与安装</h2><p>下载地址 ：<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p><p>①：如图所示，两个安装包都可以下载，不过 <code>nvm-noinstall.zip</code> 需要自行配置环境变量，而 <code>nvm-setup.zip</code> 会自动帮我们配置好环境变量，安装好后可以直接使用。这里我选择的是 <code>nvm-setup.zip</code> 。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/1.png"></img></p><p>②：首先要卸载掉之前电脑上下载的 node，运行下载的 <code>nvm-serup.exe</code> 文件，开始安装。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/2.png"></img></p><p>设置 nvm 的安装位置</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/3.png"></img></p><p>设置 node 的安装位置</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/4.png"></img></p><p>然后一直 next 即可。</p><p>③：安装结束后，可以 <code>Win + r</code>，输入<code>sysdm.cpl</code> 在 <code>高级</code> 里查看环境变量，发现环境变量已经帮我们配好了。<code>Path</code>里也添加了这两个变量，<code>Path</code> 这里就不贴图了。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/5.png"></img></p><p>④：安装好后，记得要新建一个文件夹，这个文件夹的位置要与安装 nvm 步骤中设置的 node 的安装位置对应。</p><p>⑤：<code>Win + r</code> ，输入 <code>cmd</code> 进入命令面板，输入<code>nvm</code> 命令即可查看 nvm 是否安装成功。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/6.png"></img> </p><p>如图所示，表示安装成功。</p><p>⑥：接下来就可以安装我们所需要的不同版本的 node 了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如 10.14.1 版本node</span></span><br><span class="line">nvm install 10.14.1</span><br></pre></td></tr></table></figure><p>⑦：安装成功后，可以查看自己的 <code>node</code> 和 <code>npm</code> 版本（我这里之前安装过了，就直接查看版本了）。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/7.png"></img></p><p>如果出现 <code>node 不是内部或外部命令，也不是可运行的程序或批处理文件</code>，可以使用管理员运行。</p><p>⑧：使用命令查看管理的 node 的版本，当前使用的 node 版本前会有个 <code>*</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/nvmOrder/8.png"></img></p><p>⑨：切换 node 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如切换到 16.14.1 版本</span></span><br><span class="line">nvm use 16.14.1</span><br></pre></td></tr></table></figure><p>大功告成！这样就可以根据自己的需求很方便的切换不同版本的 node 了！</p><p>本文到此也就结束了，最后贴几个常用命令留待以后查阅。</p><h2 id="3-nvm-常用命令"><a href="#3-nvm-常用命令" class="headerlink" title="3. nvm 常用命令"></a>3. nvm 常用命令</h2><p> 显示nvm版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm v     </span><br></pre></td></tr></table></figure><p>显示版本列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示已安装的版本（同 nvm list installed）</span></span><br><span class="line">nvm list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示已安装的版本</span></span><br><span class="line">nvm list installed</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有可以下载的版本</span></span><br><span class="line">nvm list available </span><br></pre></td></tr></table></figure><p>安装指定版本 node</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如10.14.2版本node</span></span><br><span class="line">nvm install 10.14.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新版本node</span></span><br><span class="line">nvm install latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新稳定版node.js</span></span><br><span class="line">nvm install stable </span><br></pre></td></tr></table></figure><p>使用指定版本 node</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16.14.1</span><br></pre></td></tr></table></figure><p>卸载指定版本 node</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 10.14.2 </span><br></pre></td></tr></table></figure><p>关闭 node 版本管理  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm off                </span><br></pre></td></tr></table></figure><p>启用 node 版本管理 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm on    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-写在前面&quot;&gt;&lt;a href=&quot;#1-写在前面&quot; class=&quot;headerlink&quot; title=&quot;1. 写在前面&quot;&gt;&lt;/a&gt;1. 写在前面&lt;/h2&gt;&lt;p&gt;之前学习了网上一个项目，使用的 node 是 &lt;code&gt;10.14.1&lt;/code&gt; 版本的，而部署博</summary>
      
    
    
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>encrypt的目录bug</title>
    <link href="http://example.com/2022/05/10/Encrypt%E7%9A%84%E7%9B%AE%E5%BD%95bug/"/>
    <id>http://example.com/2022/05/10/Encrypt%E7%9A%84%E7%9B%AE%E5%BD%95bug/</id>
    <published>2022-05-10T07:08:00.000Z</published>
    <updated>2022-05-24T03:15:59.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>起初是不想搞博文加密的，奈何博客地址不小心泄露给表妹，于是决定还是要折腾一下这个博文加密。</p><p>（😎 ：表妹啊，你就别想敲诈我了！）</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h3 id="加密文章"><a href="#加密文章" class="headerlink" title="加密文章"></a>加密文章</h3><p>①：在想要加密的博文头部增添 <code>password</code> , <code>abstract</code> , <code>message</code> 字段即可，三个字段可加可不加，不加则采用 <code>_config.yml</code> 配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Test encrypt</span><br><span class="line">date: 2022-05-09 15:08:00 </span><br><span class="line">tags:</span><br><span class="line">- Java</span><br><span class="line">password: hello</span><br><span class="line">abstract: Welcome to my blog, enter password to read. //博客部分摘要</span><br><span class="line">message: Welcome to my blog, enter password to read.  //密码输入框上面的描述性文字</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>②：在<strong>博客根目录</strong> 的<code>_config.yml</code>中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">silent:</span> <span class="literal">true</span> <span class="comment">#禁用日志</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">xray</span>  <span class="comment">#加密的主题（不是hexo主题，可到 github 上 probberechts/hexo-theme-cactus 的 readme.md 查看 ）</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">Please</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read</span> <span class="comment">#博客部分摘要</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">Please</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read</span>  <span class="comment">#密码输入框上面的描述性文字</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="literal">no</span> <span class="string">Permissions.</span>  <span class="comment">#密码错误提示</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">can</span> <span class="string">not</span> <span class="string">Verify.</span>  <span class="comment">#哈希错误提示</span></span><br></pre></td></tr></table></figure><p>③：<strong>配置优先级</strong>：博文头部配置 &gt; yml文件配置 &gt; 默认配置</p><p>④：若想禁用标签<code>(tag)</code>加密，只需将<code>password</code>属性设置为<code>&quot;&quot;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Callback Test</span><br><span class="line">date: 2019-12-21 11:54:07</span><br><span class="line">tags:</span><br><span class="line">- A Tag should be encrypted</span><br><span class="line">password: &quot;&quot;</span><br><span class="line">---</span><br><span class="line">Use a &quot;&quot; to disable tag encryption.</span><br></pre></td></tr></table></figure><p>⑤：加密成功演示：</p><ul><li><p>新建一个 <code>markdown</code> 文档并推送到 github ，内容如下。</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/1.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>被加密后的博文界面</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/2.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>输入密码并回车</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/3.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>内容显示成功，并且可以点击 <code>Encrypt again</code> 按钮回到加密界面</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/4.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li></ul><h3 id="Bug"><a href="#Bug" class="headerlink" title="Bug!"></a>Bug!</h3><p>当我在为成功实现博文加密功能沾沾自喜（😃）时，突然发现一个问题，<strong>哎我目录呢？！</strong>（ 🤡 ）</p><h3 id="分析Bug"><a href="#分析Bug" class="headerlink" title="分析Bug"></a>分析Bug</h3><p>①：检查目录对应代码，发现解密前后目录标签里面什么都没有</p><ul><li><p>解密前界面</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/5.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>解密后界面</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/6.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li></ul><p>②：因为本人前端部分只能算是小菜鸡，只能用最笨的办法根据标签id去文件里去找了。</p><p>因为是文章部分，所以直接定位到 <code>_partial\post</code>  的各个<code>ejs</code>文件，寻找的方法很简单，<code>CTRL + F</code> 搜索 <code>toc</code> 即可。</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/7.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/><p>③：最终发现 <code>toc</code> 在 <code>actions_desktop.ejs</code> 和 <code>actions_mobile.ejs</code>中出现。见名知意，一个是pc端一个是移动端呗。</p><p>以 pc端为例分析：</p><ul><li><p>发现只有一处地方出现了 <code>toc</code></p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/8.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>而经查略 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/16">issue</a>，了解到TOC的加载原理是：</p><ul><li>在执行 <code>hexo g</code> 时会按照博文内容生成 TOC，然后默认隐藏不出现。</li><li>在<code>Encrypt</code> 对文章进行加密时，<code>page.content</code> 会变成加密后的串，所以原来 TOC 生成逻辑就会针对加密后的内容。</li></ul></li></ul><p>（🤔）</p><h3 id="解决Bug"><a href="#解决Bug" class="headerlink" title="解决Bug"></a>解决Bug</h3><p>①：原理了解后就可以动手解决Bug了</p><ol><li>可以把文章原来的内容先保存起来，比如保存进 <code>page.origin</code> 字段</li><li>然后可以判断文章是否加密，针对不同的内容进行 TOC 生成。</li><li>但是生成的 TOC 是基于原文的，所以默认隐藏，需要输入密码后才能显示出来</li></ol><p>②：动手解决Bug</p><ul><li><p>pc端（actions_desktop.ejs）：</p><p>原代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc&quot;</span>&gt;</span></span><br><span class="line">&lt;%- toc(page.content) %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc&quot;</span> &lt;% <span class="attr">if</span> (<span class="attr">page.encrypt</span> == <span class="string">true)</span> &#123; %&gt;</span>style=&quot;display:none&quot; &lt;% &#125; %&gt;&gt;</span><br><span class="line">&lt;% if (page.encrypt == true) &#123; %&gt;</span><br><span class="line">&lt;%- toc(page.origin) %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">&lt;%- toc(page.content) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>移动端（actions_mobile.ejs ）</p><p>原代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">&lt;%- toc(page.content) %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一次修改：</p><p>​<b>不起作用，这是因为在每次加载页面时，如果判断当前是移动端，会有js代码帮我们把 <code>style=&quot;display:none&quot;</code> 修改为<code>style=&quot;display:inline&quot;</code></b>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span> </span><br><span class="line">&lt;% if (page.encrypt == true) &#123; %&gt;</span><br><span class="line">&lt;%- toc(page.origin) %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">&lt;%- toc(page.content) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二次修改：</p><p>​<b>知道原因后就简单了，在里面套一个 <code>&lt;div&gt;</code> 标签不就得嘞（😄）</b></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-footer2&quot;</span> &lt;% <span class="attr">if</span> (<span class="attr">page.encrypt</span> == <span class="string">true)</span> &#123; %&gt;</span>style=&quot;display:none&quot; &lt;% &#125; %&gt;&gt;</span><br><span class="line">       &lt;% if (page.encrypt == true) &#123; %&gt;</span><br><span class="line">         &lt;%- toc(page.origin) %&gt;</span><br><span class="line">       &lt;% &#125; else &#123; %&gt;</span><br><span class="line">         &lt;%- toc(page.content) %&gt;</span><br><span class="line">       &lt;% &#125; %&gt;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>③：还差最后一步，每次从 加密状态 -&gt;解密状态 进行切换时，都需要我们自己调用函数，将<code>style=&quot;display: none&quot;</code>修改为<code>style=&quot;display: inline&quot;</code>，确实有点麻烦哈（参考于<a href="https://github.com/D0n9X1n/hexo-blog-encrypt#about-callback">官方</a>的<code>Callback</code>）。</p><p>在需要加密的文章最后加入以下js代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc&quot;</span>).<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;inline&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc-footer2&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;toc-footer2&quot;</span>).<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;inline&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;  </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如图：</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/9.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/><p>④：最终测试</p><ul><li><p>pc端未解密界面：没有目录</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/10.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>pc端解密后界面：出现目录</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/11.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>移动端未解密界面：没有目录</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/12.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li><li><p>移动端解密后界面：出现目录</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/encrypt/13.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/></li></ul><p>（😎）</p><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>（🤺：本人在前端部分只能算是小菜鸡，若有错误，欢迎指正。）</p><p>（😭：还有就是使用cactus主题的前辈们实在太少了，想懒人大法都找不着C的地方。不过这次扒代码，还是很有某种收获吧！）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;起初是不想搞博文加密的，奈何博客地址不小心泄露给表妹，于是决定还是要折腾一下这个博文加密。&lt;/p&gt;
&lt;p&gt;（😎 ：表妹啊，</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Bug" scheme="http://example.com/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>busuanzi&amp;live2d bug</title>
    <link href="http://example.com/2022/05/09/%E4%B8%8D%E8%92%9C%E5%AD%90&amp;%E7%9C%8B%E6%9D%BF%E5%96%B5bug/"/>
    <id>http://example.com/2022/05/09/%E4%B8%8D%E8%92%9C%E5%AD%90&amp;%E7%9C%8B%E6%9D%BF%E5%96%B5bug/</id>
    <published>2022-05-09T00:48:00.000Z</published>
    <updated>2022-05-24T05:10:34.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bug引入"><a href="#bug引入" class="headerlink" title="bug引入"></a>bug引入</h2><p> 在已经使用不蒜子插件实现流量统计的Hexo博客中对页面进一步美化时，加入live2d看板娘导致不蒜子失效。实践发现启动live2d插件功能时（即配置文件中<code>enable: true</code>），不蒜子失效，关闭插件（<code>enable: false</code>），不蒜子功能正常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#看板喵</span><br><span class="line">live2d:</span><br><span class="line">  enable: true  #是否启用live2d</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model: </span><br><span class="line">    use: live2d-widget-model-hijiki #模型选择</span><br><span class="line">  display: </span><br><span class="line">    position: left   </span><br><span class="line">    width: 140       </span><br><span class="line">    height: 280      </span><br><span class="line">  mobile: </span><br><span class="line">    show: false      </span><br></pre></td></tr></table></figure><h2 id="解决bug"><a href="#解决bug" class="headerlink" title="解决bug"></a>解决bug</h2><p>①：分别对不蒜子功能正常和非正常状态下的页面代码进行分析，发现不蒜子失效时的代码中显示<code>style=&quot;display: none;&quot;</code>，</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/(busuanzi&live2d)bug/14.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/><p>而关闭 live2d 插件后正常状态下是<code>style=&quot;display: inline;&quot;</code>，如下图：</p><img src='http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/(busuanzi&live2d)bug/15.png' align='center' style=' width:1888px; border:dashed 1px #008B8B; '/><p>②：查看自己添加的不蒜子代码，本人添加代码的位置为 <code>themes\cactus\layout\_partial\footer.ejs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不蒜子统计访问量 --&gt;</span></span><br><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;       </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-pv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-uv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入不蒜子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在网页中直接打开我们引入的js，得到实现代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bszCaller,bszTag;!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> c,d,e,a=!<span class="number">1</span>,b=[];ready=<span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> a||<span class="string">&quot;interactive&quot;</span>===<span class="variable language_">document</span>.<span class="property">readyState</span>||<span class="string">&quot;complete&quot;</span>===<span class="variable language_">document</span>.<span class="property">readyState</span>?c.<span class="title function_">call</span>(<span class="variable language_">document</span>):b.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> c.<span class="title function_">call</span>(<span class="variable language_">this</span>)&#125;),<span class="variable language_">this</span>&#125;,d=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>,c=b.<span class="property">length</span>;c&gt;a;a++)b[a].<span class="title function_">apply</span>(<span class="variable language_">document</span>);b=[]&#125;,e=<span class="keyword">function</span>(<span class="params"></span>)&#123;a||(a=!<span class="number">0</span>,d.<span class="title function_">call</span>(<span class="variable language_">window</span>),<span class="variable language_">document</span>.<span class="property">removeEventListener</span>?<span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>,e,!<span class="number">1</span>):<span class="variable language_">document</span>.<span class="property">attachEvent</span>&amp;&amp;(<span class="variable language_">document</span>.<span class="title function_">detachEvent</span>(<span class="string">&quot;onreadystatechange&quot;</span>,e),<span class="variable language_">window</span>==<span class="variable language_">window</span>.<span class="property">top</span>&amp;&amp;(<span class="built_in">clearInterval</span>(c),c=<span class="literal">null</span>)))&#125;,<span class="variable language_">document</span>.<span class="property">addEventListener</span>?<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>,e,!<span class="number">1</span>):<span class="variable language_">document</span>.<span class="property">attachEvent</span>&amp;&amp;(<span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;onreadystatechange&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="regexp">/loaded|complete/</span>.<span class="title function_">test</span>(<span class="variable language_">document</span>.<span class="property">readyState</span>)&amp;&amp;<span class="title function_">e</span>()&#125;),<span class="variable language_">window</span>==<span class="variable language_">window</span>.<span class="property">top</span>&amp;&amp;(c=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">try</span>&#123;a||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">doScroll</span>(<span class="string">&quot;left&quot;</span>)&#125;<span class="keyword">catch</span>(b)&#123;<span class="keyword">return</span>&#125;<span class="title function_">e</span>()&#125;,<span class="number">5</span>)))&#125;(),bszCaller=&#123;<span class="attr">fetch</span>:<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">var</span> c=<span class="string">&quot;BusuanziCallback_&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1099511627776</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>());<span class="variable language_">window</span>[c]=<span class="variable language_">this</span>.evalCall(b),a=a.<span class="title function_">replace</span>(<span class="string">&quot;=BusuanziCallback&quot;</span>,<span class="string">&quot;=&quot;</span>+c),scriptTag=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;SCRIPT&quot;</span>),scriptTag.<span class="property">type</span>=<span class="string">&quot;text/javascript&quot;</span>,scriptTag.<span class="property">defer</span>=!<span class="number">0</span>,scriptTag.<span class="property">src</span>=a,scriptTag.<span class="property">referrerPolicy</span>=<span class="string">&quot;no-referrer-when-downgrade&quot;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;HEAD&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(scriptTag)&#125;,<span class="attr">evalCall</span>:<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>)&#123;<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">try</span>&#123;<span class="title function_">a</span>(b),scriptTag.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(scriptTag)&#125;<span class="keyword">catch</span>(c)&#123;bszTag.<span class="title function_">hides</span>()&#125;&#125;)&#125;&#125;&#125;,bszCaller.<span class="title function_">fetch</span>(<span class="string">&quot;//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback&quot;</span>,<span class="keyword">function</span>(<span class="params">a</span>)&#123;bszTag.<span class="title function_">texts</span>(a),bszTag.<span class="title function_">shows</span>()&#125;),bszTag=&#123;<span class="attr">bszs</span>:[<span class="string">&quot;site_pv&quot;</span>,<span class="string">&quot;page_pv&quot;</span>,<span class="string">&quot;site_uv&quot;</span>],<span class="attr">texts</span>:<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">b</span>)&#123;<span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_value_&quot;</span>+b);c&amp;&amp;(c.<span class="property">innerHTML</span>=a[b])&#125;)&#125;,<span class="attr">hides</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_container_&quot;</span>+a);b&amp;&amp;(b.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;none&quot;</span>)&#125;)&#125;,<span class="attr">shows</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_container_&quot;</span>+a);b&amp;&amp;(b.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;inline&quot;</span>)&#125;)&#125;&#125;;</span><br></pre></td></tr></table></figure><p>③：而解决方法也很简单，首先是将不蒜子的js插件保存到本地。这个位置很重要，后面需要引入这个位置的js文件。</p><p>在我的主题中位于<code>\themes\cactus\source\lib\busuanzi\busuanzi.pure.mini.js</code>。</p><p>将js文件更改为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bszCaller,bszTag;!<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> c,d,e,a=!<span class="number">1</span>,b=[];ready=<span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> a||<span class="string">&quot;interactive&quot;</span>===<span class="variable language_">document</span>.<span class="property">readyState</span>||<span class="string">&quot;complete&quot;</span>===<span class="variable language_">document</span>.<span class="property">readyState</span>?c.<span class="title function_">call</span>(<span class="variable language_">document</span>):b.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> c.<span class="title function_">call</span>(<span class="variable language_">this</span>)&#125;),<span class="variable language_">this</span>&#125;,d=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>,c=b.<span class="property">length</span>;c&gt;a;a++)b[a].<span class="title function_">apply</span>(<span class="variable language_">document</span>);b=[]&#125;,e=<span class="keyword">function</span>(<span class="params"></span>)&#123;a||(a=!<span class="number">0</span>,d.<span class="title function_">call</span>(<span class="variable language_">window</span>),<span class="variable language_">document</span>.<span class="property">removeEventListener</span>?<span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>,e,!<span class="number">1</span>):<span class="variable language_">document</span>.<span class="property">attachEvent</span>&amp;&amp;(<span class="variable language_">document</span>.<span class="title function_">detachEvent</span>(<span class="string">&quot;onreadystatechange&quot;</span>,e),<span class="variable language_">window</span>==<span class="variable language_">window</span>.<span class="property">top</span>&amp;&amp;(<span class="built_in">clearInterval</span>(c),c=<span class="literal">null</span>)))&#125;,<span class="variable language_">document</span>.<span class="property">addEventListener</span>?<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>,e,!<span class="number">1</span>):<span class="variable language_">document</span>.<span class="property">attachEvent</span>&amp;&amp;(<span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;onreadystatechange&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="regexp">/loaded|complete/</span>.<span class="title function_">test</span>(<span class="variable language_">document</span>.<span class="property">readyState</span>)&amp;&amp;<span class="title function_">e</span>()&#125;),<span class="variable language_">window</span>==<span class="variable language_">window</span>.<span class="property">top</span>&amp;&amp;(c=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">try</span>&#123;a||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">doScroll</span>(<span class="string">&quot;left&quot;</span>)&#125;<span class="keyword">catch</span>(b)&#123;<span class="keyword">return</span>&#125;<span class="title function_">e</span>()&#125;,<span class="number">5</span>)))&#125;(),bszCaller=&#123;<span class="attr">fetch</span>:<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">var</span> c=<span class="string">&quot;BusuanziCallback_&quot;</span>+<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1099511627776</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>());<span class="variable language_">window</span>[c]=<span class="variable language_">this</span>.evalCall(b),a=a.<span class="title function_">replace</span>(<span class="string">&quot;=BusuanziCallback&quot;</span>,<span class="string">&quot;=&quot;</span>+c),scriptTag=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;SCRIPT&quot;</span>),scriptTag.<span class="property">type</span>=<span class="string">&quot;text/javascript&quot;</span>,scriptTag.<span class="property">defer</span>=!<span class="number">0</span>,scriptTag.<span class="property">src</span>=a,<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;HEAD&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(scriptTag)&#125;,<span class="attr">evalCall</span>:<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>)&#123;<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">try</span>&#123;<span class="title function_">a</span>(b),scriptTag.<span class="property">parentElement</span>.<span class="title function_">removeChild</span>(scriptTag)&#125;<span class="keyword">catch</span>(c)&#123;bszTag.<span class="title function_">hides</span>()&#125;&#125;)&#125;&#125;&#125;,bszCaller.<span class="title function_">fetch</span>(<span class="string">&quot;//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback&quot;</span>,<span class="keyword">function</span>(<span class="params">a</span>)&#123;bszTag.<span class="title function_">texts</span>(a),bszTag.<span class="title function_">shows</span>()&#125;),bszTag=&#123;<span class="attr">bszs</span>:[<span class="string">&quot;site_pv&quot;</span>,<span class="string">&quot;page_pv&quot;</span>,<span class="string">&quot;site_uv&quot;</span>],<span class="attr">texts</span>:<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">b</span>)&#123;<span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_value_&quot;</span>+b);c&amp;&amp;(c.<span class="property">innerHTML</span>=a[b])&#125;)&#125;,<span class="attr">hides</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_container_&quot;</span>+a);b&amp;&amp;(b.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;&quot;</span>)&#125;)&#125;,<span class="attr">shows</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">bszs</span>.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;<span class="keyword">var</span> b=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;busuanzi_container_&quot;</span>+a);b&amp;&amp;(b.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;inline&quot;</span>)&#125;)&#125;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>操作其实就是把其中的<b><code>b.style.display=&quot;none&quot;</code>中<code>none</code></b>去掉。</p><p>④：然后到 添加的不蒜子代码的位置 修改代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不蒜子统计访问量 --&gt;</span></span><br><span class="line">&lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;       </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-pv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-uv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入不蒜子(路径修改为自己下载js的地址)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/lib/busuanzi/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>⑤：可参考本人footer.ejs 全部代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网站运行时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;05/06/2022 22:38:00&quot;</span>);<span class="comment">//建站时间 格式：月/日/年 时:分:秒</span></span></span><br><span class="line"><span class="language-javascript">                now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>); </span></span><br><span class="line"><span class="language-javascript">                days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days); </span></span><br><span class="line"><span class="language-javascript">                hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours); </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="language-javascript">                mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span></span><br><span class="line"><span class="language-javascript">                seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span></span><br><span class="line"><span class="language-javascript">                snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;has been running for &quot;</span>+dnum+<span class="string">&quot; d &quot;</span>; </span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; h &quot;</span> + mnum + <span class="string">&quot; m &quot;</span> + snum + <span class="string">&quot; s&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">            &#125; </span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 版权年份 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          &lt;%= __(&#x27;footer.copyright&#x27;) %&gt; <span class="symbol">&amp;copy;</span></span><br><span class="line">          &lt;% var endYear = (theme.copyright &amp;&amp; theme.copyright.end_year) ? theme.copyright.end_year : new Date().getFullYear() %&gt;</span><br><span class="line">          &lt;% var startYear = (theme.copyright &amp;&amp; theme.copyright.start_year) ? theme.copyright.start_year : new Date().getFullYear() %&gt;</span><br><span class="line">          &lt;%= startYear &gt;= endYear ? endYear : startYear + &quot;-&quot; + endYear %&gt;</span><br><span class="line">          &lt;%= config.author || config.title %&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for (var i in theme.nav) &#123; %&gt;<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          --&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- url_for(theme.nav[i]) %&gt;&quot;</span>&gt;</span>&lt;%= __(&#x27;nav.&#x27;+i).replace(&quot;nav.&quot;, &quot;&quot;) %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        --&gt;</span>&lt;% &#125; %&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">          <span class="comment">&lt;!-- 不蒜子统计访问量 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable)&#123; %&gt;       </span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-pv&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;site-uv&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;busuanzi-user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/lib/busuanzi/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            &lt;% &#125; %&gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bug引入&quot;&gt;&lt;a href=&quot;#bug引入&quot; class=&quot;headerlink&quot; title=&quot;bug引入&quot;&gt;&lt;/a&gt;bug引入&lt;/h2&gt;&lt;p&gt; 在已经使用不蒜子插件实现流量统计的Hexo博客中对页面进一步美化时，加入live2d看板娘导致不蒜子失效。实践发现</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Bug" scheme="http://example.com/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>CMS&amp;G1八股文</title>
    <link href="http://example.com/2022/04/30/CMS&amp;G1-%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>http://example.com/2022/04/30/CMS&amp;G1-%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2022-04-30T10:29:31.000Z</published>
    <updated>2022-05-31T04:40:33.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial  收集器"></a>Serial  收集器</h2><p><img src="https://javaguide.cn/assets/46873026.3a9311ec.png" alt=" Serial 收集器 "></p><p>①：是单线程回收器，历史最悠久</p><p>②：工作时会 “Stop The World” </p><p>③：新生代采用 标记 - 复制 算法，老年代采用 标记 - 整理算法</p><p>④：简单高效，有较高单线程收集效率，对于运行在 Client 模式下的虚拟机而言是个不错的选择</p><p>⑤：能够与 CMS 垃圾收集器配合使用</p><h2 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew  收集器"></a>ParNew  收集器</h2><p><img src="https://javaguide.cn/assets/22018368.df835851.png" alt="ParNew 收集器 "></p><p>①：Serical 的多线程版本</p><p>②：新生代采用 标记 - 复制 算法，老年代采用 标记 - 整理算法</p><p>③：默认开始线程数与CPU核数相同</p><p>④：能够与 CMS 垃圾收集器配合使用</p><h2 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge  收集器"></a>Parallel Scavenge  收集器</h2><p><img src="https://javaguide.cn/assets/22018368.df835851.png" alt="Parallel Scavenge 收集器 "></p><p>①：关注点是系统吞吐量（代码运行时间 &#x2F; CPU总耗时时间）和高效利用 CPU，而 CMS 等垃圾收集器更多关注的是用户停顿时间（用户体验）</p><p>②：新生代采用 标记 - 复制 算法，老年代采用 标记 - 整理算法</p><h2 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h2><p>①：Serial 垃圾收集器的老年代版本</p><p>②：使用 标记 - 整理 算法</p><p>②：作为CMS 垃圾收集器的后备方案</p><h2 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old  收集器"></a>Parallel Old  收集器</h2><p>①：Parallel Scavenge 收集器的老年代版本</p><p>②：使用多线程和 标记 - 整理 算法</p><p>③：作为CMS 垃圾收集器的后备方案</p><h2 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS  收集器"></a>CMS  收集器</h2><p>①：CMS(Concurrent Mark Sweep)「并发标记清除」以获取最短回收停顿时间为目标，注重用户体验，是老年代的收集器</p><p>②：HotSpot 虚拟机第一款真正意义上的并发收集器，一定程度上实现了用户线程和垃圾回收线程的同时工作</p><p>③：使用 标记 - 清除 算法</p><p>④：回收过程：初始标记、并发标记、并发预清理、重新标记以及并发清除</p><p><img src="https://javaguide.cn/assets/CMS%E6%94%B6%E9%9B%86%E5%99%A8.8a4d0487.png" alt="CMS 垃圾收集器 "></p><ol><li>初始标记：标记GCRoots「直接关联」的对象以及「年轻代」指向「老年代」的对象（Stop The World），速度很快</li><li>并发标记：同时开启 GC 和用户线程。这一阶段主要是从GC Roots向下「追溯」，标记所有可达的对象。比较耗费时间的（需要追溯）</li><li>并发预清理：目的是减少下一个阶段「重新标记」所消耗的时间<ul><li>「并发标记」这个阶段由于用户线程是没有被挂起的，所以对象是有可能发生变化的。 可能有些对象，从新生代晋升到了老年代；也可能有些对象，直接分配到了老年代（大对象）；也可能老年代或者新生代的对象引用发生了变化…</li><li>针对老年代的对象，可以借助card table的存储（将老年代对象发生变化所对应的卡页标记为dirty）。所以「并发预处理」这个阶段会扫描可能由于「并发标记」时导致老年代发生变化的对象，会再扫描一遍标记为dirty的卡页。对于新生代的对象，我们还是得遍历新生代来看看在「并发标记」过程中有没有对象引用了老年代。不过JVM里给我们提供了很多「参数」，有可能在这个过程中会触发一次 Minor GC（触发了Minor GC 是意味着就可以更少地遍历新生代的对象）</li></ul></li><li>重新标记（Stop The World）：这个过程的停顿时间其实很大程度上取决于上面「并发预处理」阶段，重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li>并发清除：不会Stop The World。一边用户线程在执行，一边GC线程在回收不可达的对象。这个过程，还是有可能用户线程在不断产生垃圾，但只能留到下一次GC 进行处理了，产生的这些垃圾被叫做 “浮动垃圾” 。</li></ol><p>⑤：主要优点：并发收集、低停顿</p><p>⑥：主要缺点</p><ol><li>空间需要预留：CMS垃圾收集器可以一边回收垃圾，一边处理用户线程，那在这个过程中需要保证有充足的内存空间供用户使用。如果CMS运行过程中预留的空间不够用了，就会报错，这时会启动 Serial Old垃圾收集器进行老年代的垃圾回收，会导致停顿的时间很长。当然空间预留多少也是有参数配置的</li><li>内存碎片问题：CMS本质上是实现了「标记清除算法」的收集器，这会意味着会产生内存碎片。由于碎片太多，又可能会导致内存空间不足所触发Full GC，CMS一般会在触发Full GC这个过程对碎片进行整理。整理涉及到「移动」或「标记」，那这个过程肯定会Stop The World的，如果内存足够大，那这个过程卡顿也是需要一定的时间的。</li></ol><h2 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h2><p>①：面向服务器，针对大容量内存的机器</p><p>②：满足GC停顿时间要求的同时，还具备高吞吐量性能</p><p>③：整体看采用 “标记 - 整理” 算法，局部看采用 “标记 - 复制” 算法</p><p>④：新生代（Eden、S1、S0），老年代（Old）等不再按照物理划分，而是按照逻辑划分。将堆内存「逻辑」划分为多个Region，增添了Humongous（大对象区域），其实就是用来存储特别大的对象（大于Region内存的一半），一旦发现没有引用指向大对象，就可直接在年轻代的Minor GC中被回收掉。</p><img src="https://pic1.zhimg.com/80/v2-669ab989756f3aafe7d85b468d01a2ac_1440w.jpg" alt="img" style="zoom: 50%;" /><p>⑤：为什么要将「堆空间」进行「细分」多个小的区域？</p><p>如果堆空间（内存）大的时候，每次进行「垃圾回收」都需要对一整块大的区域进行回收，那收集的时间是不好控制的，而划分多个小区域之后，那对这些「小区域」回收就容易控制它的「收集时间」了。</p><p>⑥：Minor GC：</p><ol><li>等到Eden区满了之后，会触发Minor GC（Stop The World）</li><li>在G1的世界里，新生代和老年代所占堆的空间是没那么固定的（会动态根据「最大停顿时间」进行调整），这块要知道会给我们提供参数进行配置就好了，所以，动态地改变年轻代Region的个数可以「控制」Minor GC的开销</li><li>分为三个步骤：根扫描、更新&amp;&amp;处理 RSet、复制对象<ol><li>根扫描：会 “Stop The World”，记录下直接与 root 相连的对象，速度很快 </li><li>更新&amp;&amp;处理RSet：<ul><li>涉及到「Rset」的概念：在CMS中，因为Minor GC 是回收年轻代的对象，但如果老年代有对象引用着年轻代，那这些被老年代引用的对象也不能回收掉。同样的，在G1也有这种问题（毕竟是Minor GC）。CMS使用的是卡表，而G1解决「跨代引用」的问题的存储一般叫做RSet，RSet这种存储在每个Region都会有，它记录着「其他Region引用了当前Region的对象关系」</li><li>对于年轻代的Region，它的RSet 只保存了来自老年代的引用（因为年轻代的没必要存储，自己都要做Minor GC了）</li><li>而对于老年代的 Region 来说，它的 RSet 也只会保存老年代对它的引用（在G1垃圾收集器，老年代回收之前，都会先对年轻代进行回收，所以没必要保存年轻代的引用）</li><li>所以第二步主要做的事情：处理RSet的信息并且扫描，将老年代对象持有年轻代对象的相关引用都加入到GC Roots下，避免被回收掉</li></ul></li><li>复制对象：把扫描之后存活的对象往「空的Survivor区」或者「老年代」存放，其他的Eden区进行清除<ul><li>这里要提下的是，在G1还有另一个名词，叫做CSet(Collection Set)。它保存了一次GC中「将执行垃圾回收」的Region。CSet中的所有存活对象都会被转移到别的可用Region上。在Minor GC 的最后，会处理下软引用、弱引用等引用，结束收集</li></ul></li></ol></li></ol><p>⑦：Mixed GC：</p><ol><li>当堆空间的占用率达到一定阈值后会触发Mixed GC（默认45%，由参数决定）</li><li>Mixed GC 依赖「全局并发标记」统计后的Region数据，「全局并发标记」它的过程跟CMS非常类型</li><li>步骤大概是：初始标记（STW）、并发标记、最终标记（STW）以及清理（STW）<ol><li>初始标记：这个过程是「共用」了Minor GC的 Stop The World（Mixed GC 一定会发生 Minor GC），复用了「扫描GC Roots」的操作。在这个过程中，老年代和新生代都会扫，总的来说，「初始标记」这个过程还是比较快的，毕竟没有追溯遍历嘛</li><li>并发标记：这个阶段不会Stop The World，GC线程与用户线程一起执行，GC线程负责收集各个 Region 的存活对象信息。从GC Roots往下追溯，查找整个堆存活的对象，比较耗时<ul><li>在G1中解决「并发标记」阶段导致引用变更的问题，使用的是SATB算法。可以简单理解为：在GC 开始的时候，它为存活的对象做了一次「快照」，在「并发阶段」时，把每一次发生引用关系变化时旧的引用值给记下来，然后在「重新标记」阶段只扫描着块「发生过变化」的引用，看有没有对象还是存活的，加入到「GC Roots」上，不过SATB算法有个小的问题，就是：如果在开始时，G1就认为它是活的，那就在此次GC中不会对它回收，即便可能在「并发阶段」上对象已经变为了垃圾。所以，G1也有可能会存在「浮动垃圾」的问题，但是总的来说，对于G1而言，问题不大（毕竟它不是追求一次把所有的垃圾都清除掉，而是注重 Stop The World时间）</li></ul></li><li>最终标记：跟CMS又一样，标记那些在「并发标记」阶段发生变化的对象</li><li>清理：这个阶段也是会Stop The World的，主要清点和重置标记状态。会根据「停顿预测模型」（其实就是设定的停顿时间），来决定本次GC回收多少Region。一般来说，Mixed GC会选定所有的年轻代Region，部分「回收价值高」的老年代Region（回收价值高其实就是垃圾多）进行采集。最后Mixed GC 进行清除还是通过「拷贝」的方式去干的。所以，一次回收未必是将所有的垃圾进行回收的，G1会依据停顿时间做出选择Region数量</li></ol></li></ol><p>⑧：Full GC：如果在Mixed GC中无法跟上用户线程分配内存的速度，导致老年代填满无法继续进行Mixed GC，就又会降级到Serial Old GC来收集整个GC heap。不过这个场景相较于CMS还是很少的，毕竟G1没有CMS内存碎片这种问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html#%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2">JVM 垃圾回收详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/431042318">稳了！我准备了1个晚上的CMS垃圾收集器</a></p><p><a href="https://zhuanlan.zhihu.com/p/431908205">什么？面试官问我G1垃圾收集器？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Serial-收集器&quot;&gt;&lt;a href=&quot;#Serial-收集器&quot; class=&quot;headerlink&quot; title=&quot;Serial  收集器&quot;&gt;&lt;/a&gt;Serial  收集器&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://javaguide.cn/asset</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Jvm" scheme="http://example.com/tags/Jvm/"/>
    
    <category term="八股文" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Rpc巩固</title>
    <link href="http://example.com/2022/03/22/Rpc%E5%B7%A9%E5%9B%BA/"/>
    <id>http://example.com/2022/03/22/Rpc%E5%B7%A9%E5%9B%BA/</id>
    <published>2022-03-21T16:00:00.000Z</published>
    <updated>2022-05-24T03:31:39.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-RPC简介"><a href="#1-RPC简介" class="headerlink" title="1.RPC简介"></a>1.RPC简介</h2><p>RPC（Remote Procedure Call）远程调用协议。RPC协议规定允许互联网中一台主机调用另一台主机的程序，而程序员无需对这个交互过程进行编程。在RPC协议中强调<b>当A程序调用B程序中的功能或方法时，A是不知道B中方法的实现的</b>。</p><p>RPC是上层协议，底层可以基于TCP协议，也可以基于HTTP协议。一般我们说RPC都是基于RPC的具体实现，如：Dubbo框架。从广义上来讲只要是满足网络中进行通讯调用的都统称为RPC，甚至基于HTTP协议都可以说是RPC的具体实现，但是具体分析来看RPC协议要比HTTP协议更加高效，基于RPC的框架功能更多。</p><p>RPC协议是基于分布式架构而出现的，所以RPC在分布式项目中有得天独厚的优势。</p><h2 id="2-RPC和HTTP对比"><a href="#2-RPC和HTTP对比" class="headerlink" title="2.RPC和HTTP对比"></a>2.RPC和HTTP对比</h2><h3 id="2-1具体实现"><a href="#2-1具体实现" class="headerlink" title="2.1具体实现"></a>2.1具体实现</h3><p>RPC：可以基于TCP协议，也可以基于HTTP协议。（传输层 + 应用层）</p><p>HTTP：基于HTTP协议。（应用层）</p><h3 id="2-2效率"><a href="#2-2效率" class="headerlink" title="2.2效率"></a>2.2效率</h3><p>RPC：自定义具体实现可以减少很多无用的报文内容，使得报文体积更小。</p><p>HTTP：如果是HTTP1.1 报文中内容固定，传递的报文对于客户端而言有些是无用的。如果是HTTP2.0 以后的版本和RPC相差不大，比RPC少的可能就是一些服务治理等功能。</p><h3 id="2-3连接方式"><a href="#2-3连接方式" class="headerlink" title="2.3连接方式"></a>2.3连接方式</h3><p>RPC：长连接支持</p><p>HTTP：前期不支持长连接，每次建立连接都需要3次握手，断开连接需要4次挥手。HTTP2.0后增加了连接池，可以支持长连接。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc/rpc1.png"></img></p><h3 id="2-4性能"><a href="#2-4性能" class="headerlink" title="2.4性能"></a>2.4性能</h3><p>RPC：可以基于很多序列化方式（可以支持字节，也可以支持文本）</p><p>HTTP：主要是通过JSON，序列化和反序列化效率更低（超文本传输协议，支持文本）</p><h3 id="2-5注册中心"><a href="#2-5注册中心" class="headerlink" title="2.5注册中心"></a>2.5注册中心</h3><p>RPC：一般RPC框架都带有注册中心</p><p>HTTP：直接连接</p><h3 id="2-6负载均衡"><a href="#2-6负载均衡" class="headerlink" title="2.6负载均衡"></a>2.6负载均衡</h3><p>RPC：绝大多数RPC框架都带有负载均衡</p><p>HTTP：一般都需要第三方工具。如：nginx</p><h3 id="2-7总结"><a href="#2-7总结" class="headerlink" title="2.7总结"></a>2.7总结</h3><p>RPC框架一般都带有丰富的服务治理等功能，更适合企业内部接口调用。而HTTP更适合多平台之间互相调用。例如：某人在京东秒杀商品，采用的是HTTP协议；而点击秒杀按钮后，京东内部采用的是RPC协议，我们并不了解秒杀按钮的具体做了什么。</p><h2 id="3-HttpClient实现RPC"><a href="#3-HttpClient实现RPC" class="headerlink" title="3.HttpClient实现RPC"></a>3.HttpClient实现RPC</h2><h3 id="3-1HttpClient简介"><a href="#3-1HttpClient简介" class="headerlink" title="3.1HttpClient简介"></a>3.1HttpClient简介</h3><p>在JDK中java.net包下提供了用户HTTP访问的基本功能，但是它缺少灵活性或许多应用所缺少的功能。我们可以使用基于Http协议的HttpClient（来自Apache）来实现使用Java代码完成标准HTTP请求以及响应；支持池化（长连接）</p><h3 id="3-2模拟实现"><a href="#3-2模拟实现" class="headerlink" title="3.2模拟实现"></a>3.2模拟实现</h3><h4 id="3-2-1无参数Get请求模拟"><a href="#3-2-1无参数Get请求模拟" class="headerlink" title="3.2.1无参数Get请求模拟"></a>3.2.1无参数Get请求模拟</h4><p>客户端（浏览器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*无参数的GET请求*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGetWithoutParams</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/test&quot;</span>);<span class="comment">//声明get请求</span></span><br><span class="line"></span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(get);<span class="comment">//发起请求并接受结果</span></span><br><span class="line"><span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();<span class="comment">//获取响应体。响应数据是个基于HTTP协议标准字符串封装的对象，可能有乱码问题。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">responseString</span> <span class="operator">=</span> EntityUtils.toString(entity,<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//通过Http实体工具类，采取&quot;UTF-8&quot;格式转换响应体数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;服务器响应数据是 - [&quot;</span> + responseString + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    client.close();<span class="comment">//关闭客户端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test&quot;,produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;msg\&quot;:\&quot;处理返回\&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2带参数Get请求模拟"><a href="#3-2-2带参数Get请求模拟" class="headerlink" title="3.2.2带参数Get请求模拟"></a>3.2.2带参数Get请求模拟</h4><p>客户端（浏览器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*有参数的GET请求*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGetWithParams</span><span class="params">()</span> <span class="keyword">throws</span> URIException&#123;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="comment">/*URI的构建分是否使用?携带参数，以下为不使用?携带参数的方式*/</span></span><br><span class="line">    <span class="comment">//可以使用URIBuilder类来构建；或者使用HttpGet（参考无参数Get请求模拟），下面使用URIBuilder类</span></span><br><span class="line">    <span class="type">URIBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(<span class="string">&quot;http://localhost:8080/params&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*参数传递分为单参数传递和多参数传递，二选一即可*/</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//基于单参数传递</span></span><br><span class="line">    <span class="comment">/*buildr.addParameter(&quot;name&quot;,&quot;soul&quot;);</span></span><br><span class="line"><span class="comment">    buildr.addParameter(&quot;password&quot;,&quot;123&quot;);</span></span><br><span class="line"><span class="comment">    URI uri = builder.build();*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基于多参数传递</span></span><br><span class="line">    List&lt;NameValuePair&gt; nvps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    nvps.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;soul&quot;</span>));</span><br><span class="line">    nvps.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    builder.addParameters(nvps);</span><br><span class="line">    <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> builder.build();</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">responseString</span> <span class="operator">=</span> EntityUtils.toString(client.execute(<span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri)).getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;服务器响应数据是 - [&quot;</span> + responseString + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/params&quot;,produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">params</span><span class="params">(String name, String password)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name - &quot;</span> + name + <span class="string">&quot;; password - &quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;msg\&quot;:\&quot;登录成功\&quot;,\&quot;user\&quot;:&#123;\&quot;name\&quot;:\&quot;&quot;</span>+name+<span class="string">&quot;\&quot;,\&quot;password\&quot;:\&quot;&quot;</span>+password+<span class="string">&quot;\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3无参数Post请求模拟"><a href="#3-2-3无参数Post请求模拟" class="headerlink" title="3.2.3无参数Post请求模拟"></a>3.2.3无参数Post请求模拟</h4><p>客户端（浏览器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*无参数的POST请求*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPostWithParams</span><span class="params">()</span> <span class="keyword">throws</span> URIException&#123;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/test&quot;</span>);</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(get);</span><br><span class="line">    <span class="type">String</span> <span class="variable">responseString</span> <span class="operator">=</span> EntityUtils.toString(client.execute(<span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri)).getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;服务器响应数据是 - [&quot;</span> + responseString + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test&quot;,produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;msg\&quot;:\&quot;处理返回\&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4带参数Post请求模拟"><a href="#3-2-4带参数Post请求模拟" class="headerlink" title="3.2.4带参数Post请求模拟"></a>3.2.4带参数Post请求模拟</h4><p>客户端（浏览器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*有参数的POST请求*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPostWithParams</span><span class="params">()</span> <span class="keyword">throws</span> URIException&#123;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*方式1:使用请求头传递参数*/</span></span><br><span class="line">    <span class="comment">/*URI的构建分是否使用?携带参数，以下为使用?携带参数的方式*/</span></span><br><span class="line">    <span class="type">URIBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(<span class="string">&quot;http://localhost:8080/params?name=soul&amp;password=123&quot;</span>);</span><br><span class="line">    <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> builder.build();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*方式2:使用请求体传递（对象）参数*/</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">bodyParamsPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/params&quot;</span>);</span><br><span class="line">    <span class="comment">//定义请求协议体，设置请求参数。使用请求体需要定义请求体格式，默认是表单格式</span></span><br><span class="line">    <span class="comment">//使用URIBuilder对象构建的URI对象，就是请求体传递参数的</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user);<span class="comment">//这里使用了FastJson</span></span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonString, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    bodyParamsPost.setEntity(entity);</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">responseString</span> <span class="operator">=</span> EntityUtils.toString(client.execute(<span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri)).getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;服务器响应数据是 - [&quot;</span> + responseString + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/params&quot;,produces = &#123;&quot;application/json;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">params</span><span class="params">(String name, String password)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name - &quot;</span> + name + <span class="string">&quot;; password - &quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;msg\&quot;:\&quot;登录成功\&quot;,\&quot;user\&quot;:&#123;\&quot;name\&quot;:\&quot;&quot;</span>+name+<span class="string">&quot;\&quot;,\&quot;password\&quot;:\&quot;&quot;</span>+password+<span class="string">&quot;\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-RMI实现RPC"><a href="#4-RMI实现RPC" class="headerlink" title="4.RMI实现RPC"></a>4.RMI实现RPC</h2><h3 id="1-RMI简介"><a href="#1-RMI简介" class="headerlink" title="1.RMI简介"></a>1.RMI简介</h3><p>RMI（Remote Method Invocation）：是Java语言的远程调用（基于TCP协议），无法实现跨语言。</p><p>RMI是从JDK1.2推出的功能，它可以实现在一个Java应用中可以像调用本地方法一样调用另一个服务器中Java应用（JVM）的内容。</p><h3 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.执行流程"></a>2.执行流程</h3><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc/rpc2.png"></img></p><p>Registry（注册表）是放置所有服务对象的命名空间。</p><p>每次服务端创建一个对象时，它都会使用bind()或rebind()方法注册该对象。这些是使用称为绑定名称的唯一名称注册的。</p><p>要调用远程对象，客户端需要该对象的引用。即通过服务端绑定的名称从注册表中获取（lookup()方法）</p><h3 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3.工作原理"></a>3.工作原理</h3><h4 id="3-1基础知识补充"><a href="#3-1基础知识补充" class="headerlink" title="3.1基础知识补充"></a>3.1基础知识补充</h4><p><b>Java IDL</b>是一种用于分布式对象的技术，即对象在网络上的不同平台上进行交互。Java IDL使对象能够进行交互，而不管它们是以Java编程语言还是C，C ++，COBOL或其他语言编写的。这是可能的，因为Java IDL基于<b>通用对象请求代理体系结构（CORBA）</b>，即行业标准的分布式对象模型。CORBA的主要功能是IDL，一种与语言无关的接口定义语言。每种支持CORBA的语言都有自己的IDL映射。顾名思义，Java IDL支持Java映射。为了支持单独程序中对象之间的交互，Java IDL提供了一个对象请求代理或ORB（Object Request Broker）。ORB是一个类库，可在Java IDL应用程序与其他符合CORBA的应用程序之间进行低层级的通信。</p><p><b>CORBA</b>，Common ObjectRequest Broker Architecture（公共对象请求代理体系结构），是由OMG组织制订的一种标准的面向对象应用程序体系规范。CORBA使用接口定义语言（IDL），用于指定对象提供给外部的接口。然后，CORBA指定从IDL到特定实现语言（如Java）的映射。CORBA规范规定应有一个对象请求代理（ORB），通过该对象应用程序与其他对象进行交互。通用InterORB协议（GIOP）摘要协议的创建是为了允许ORB间的通信，并提供了几种具体的协议，包括Internet InterORB协议（IIOP），它是GIOP的实现，可用于Internet，并提供GIOP消息和TCP&#x2F;IP层之间的映射。</p><p><b>IIOP</b>，Internet Inter-ORB Protocol(互联网内部对象请求代理协议)，它是一个用于CORBA 2.0及兼容平台上的协议；用来在CORBA对象请求代理之间交流的协议。Java中使得程序可以和其他语言的CORBA实现互操作性的协议。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc/rpc3.png"></img></p><p><b>RMI-IIOP</b>出现以前，只有RMI和CORBA两种选择来进行分布式程序设计，二者之间不能协作。RMI-IIOP综合了RMI 和CORBA的优点，克服了他们的缺点，使得程序员能更方便的编写分布式程序设计，实现分布式计算。RMI-IIOP综合了<b>RMI的简单性</b>&gt;和<b>CORBA的多语言性兼容性</b>，RMI-IIOP克服了RMI只能用于Java的缺点和CORBA的复杂性。</p><p><b>JRMP</b>：Java远程方法协议（Java Remote Method Protocol），适用于RMI过程中的协议，只有使用这个协议，方法调用双方才能正常进行数据交流。</p><h4 id="3-2Client-amp-Server"><a href="#3-2Client-amp-Server" class="headerlink" title="3.2Client&amp;Server"></a>3.2Client&amp;Server</h4><p>从现在开始忘掉注册中心，假设注册中心从现在开始不存在<br>现在我们的需求是这样的：client想执行一个在远程机器上server的一个方法。</p><p>我们如何做到这一点？Java RMI 会处理这些问题，解决方案肯定会涉及到socket网络编程，因为server运行在远程机器上，解决这个问题的关键点在于两点：</p><ul><li>客户端如何从处理网络连接中解耦开来</li><li>客户端如何能就像调用本地方法一样来调用远程机器上的方法</li></ul><p>因此RMI 的开发人员就引入了 Stub 和 Skeleton模型。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc/rpc4.png"></img></p><p>所有与网络相关的代码都放在了Stub和Skeleton中，这样客户端和服务端就不需要处理网络相关的代码了。</p><p>Stub 同样也实现了和服务端同样 java.rmi.Remote接口，这样当 Client 想调用 Server 上方法的时候，就可以调用Stub 上的相同的方法，但是Stub里面只有和网络相关的处理逻辑，并没有对应的业务处理逻辑。比如说 Server 上有一个add()方法，Stub 中同样也有一个add()方法，但是Stub 上的这个add()方法并不包含添加的逻辑实现，它仅仅包含如何连接到远程的 Skeleton、调用方法的详细信息、参数、返回值等等。</p><h4 id="3-3RMIRegistry"><a href="#3-3RMIRegistry" class="headerlink" title="3.3RMIRegistry"></a>3.3RMIRegistry</h4><p>在socket层通信的过程如下：</p><ol><li>Server 在远程机器上监听一个端口。</li><li>Client并不知道Server 监听哪个端口，但是Stub 知道，这样Client可以调用Stub 上他想调用的任何方法。</li><li>Client调用Stub 上的方法</li><li>Stub链接Server 监听的端口并发送参数，详细过程如下：<ol><li>Client连接Server 监听的端口</li><li>Server 收到请求并创建一个Socket来处理这个链接</li><li>Server 继续监听请求</li><li>使用双方协定的信息，传送参数和结果</li><li>协议可以是JRMP或者 iiop</li></ol></li><li>方法在远程Server 上执行，并发执行结果返回给Stub</li><li>Stub返回结果给Client，就好像是Stub执行了这个方法一样。</li></ol><p>这样整个过程就结束了，但是等一下！回头再看第2点，说Stub知道Server在哪，他监听的端口，这怎么可能？如果Client不知道Server的host和port，他怎么能创建一个知道所有这一切的Stub对象呢？更何况是在服务端端口是随机选择的。</p><p>这就是 RMIRegistry 存在的必要了。RMIRegistry 可以认为是一个服务，它提供了一个hashMap，里面是 public_name, Stub_object 名值对。比如我有一个远程服务对象叫做 Scientific_Calculator，然后我想把这个服务对外公布为 calc，这样会在Server上创建一个Stub对象，然后把他注册到RMIRegistry ，这样Client就可以从RMIRegistry 中得到这个Stub对象了，你可以使用一个工具类 java.rmi.Naming 来方便的操作注册和操作。</p><h3 id="4-模拟实现"><a href="#4-模拟实现" class="headerlink" title="4.模拟实现"></a>4.模拟实现</h3><h4 id="4-1服务端接口"><a href="#4-1服务端接口" class="headerlink" title="4.1服务端接口"></a>4.1服务端接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个远程服务接口.RMI强制要求必须是Remote接口的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FirstInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//RMI强制要求所有的远程调用方法(包括构造方法)都必须抛出RemoteException</span></span><br><span class="line">    String <span class="title function_">first</span><span class="params">(String name)</span> <span class="keyword">throw</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2服务端实现类"><a href="#4-2服务端实现类" class="headerlink" title="4.2服务端实现类"></a>4.2服务端实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现远程服务接口。所有的远程服务实现，必须是Remote接口直接实现类或间接实现类</span></span><br><span class="line"><span class="comment">//如果不会创建基于RMI服务的标准实现，可以继承UnicastRemoteObject类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstRMIImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">FirstInterface</span>, Remote &#123;</span><br><span class="line">    <span class="comment">//RMI强制要求所有的远程调用方法(包括构造方法)都必须抛出RemoteException</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FirstRMIImpl</span><span class="params">()</span> <span class="keyword">throw</span> RemoteException&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">first</span><span class="params">(String name)</span> <span class="keyword">throw</span> RemoteException&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3服务端主方法"><a href="#4-3服务端主方法" class="headerlink" title="4.3服务端主方法"></a>4.3服务端主方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RMI的Registry在创建的时候，会自动生成一个子线程，并升级成守护线程。提供持久的服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         <span class="type">FirstInterface</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建服务对象</span></span><br><span class="line">            first = <span class="keyword">new</span> <span class="title class_">FirstRMIImpl</span>();</span><br><span class="line">            <span class="comment">//注册到Registry</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//绑定一个服务到注册中心。提供命名，格式为：rim://ip:port/别名，命名冲突抛出异常</span></span><br><span class="line">            <span class="comment">//Naming.bind(&quot;rim://localhost:9999/first&quot;,first);</span></span><br><span class="line">            <span class="comment">//也可以使用rebind()方法，和bind()的区别是命名冲突会直接覆盖，</span></span><br><span class="line">            Naming.rebind(<span class="string">&quot;rim://localhost:9999/first&quot;</span>,first);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4客户端主方法"><a href="#4-4客户端主方法" class="headerlink" title="4.4客户端主方法"></a>4.4客户端主方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RMI的Registry在创建的时候，会自动生成一个子线程，并升级成守护线程。提供持久的服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">         <span class="comment">//代理对象的创建</span></span><br><span class="line">         <span class="type">FirstInterface</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//使用 lookup 通过名字找服务，并自动创建代理对象。</span></span><br><span class="line">            <span class="comment">//类型是Object类型，对象一定是Proxy的子类型，且一定实现了服务接口</span></span><br><span class="line">            first = (FirstInterface) Naming.lookup(<span class="string">&quot;rim://localhost:9999/first&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> first.first(<span class="string">&quot;soul&quot;</span>);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-自定义-RPC-框架"><a href="#5-自定义-RPC-框架" class="headerlink" title="5. 自定义 RPC 框架"></a>5. 自定义 RPC 框架</h2><ol><li><a href="">基于 Zookeeper&amp;RMI 的 Rpc 框架</a></li><li><a href="">基于 Netty 的 Rpc 框架</a></li></ol><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h2><p><a href="https://www.jianshu.com/p/2c78554a3f36">深入理解 RMI 原理</a></p><p><a href="https://paper.seebug.org/1105/">关于 Java 中的 RMI-IIOP</a></p><p><a href="https://www.bilibili.com/video/BV1y54y187cf/?spm_id_from=333.788.video.desc.click">尚学堂编程俱乐部</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-RPC简介&quot;&gt;&lt;a href=&quot;#1-RPC简介&quot; class=&quot;headerlink&quot; title=&quot;1.RPC简介&quot;&gt;&lt;/a&gt;1.RPC简介&lt;/h2&gt;&lt;p&gt;RPC（Remote Procedure Call）远程调用协议。RPC协议规定允许互联网中一台主机</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RPC(Zookeeper &amp; RMI)</title>
    <link href="http://example.com/2022/03/13/RPC(Zookeeper%20&amp;%20RMI)/"/>
    <id>http://example.com/2022/03/13/RPC(Zookeeper%20&amp;%20RMI)/</id>
    <published>2022-03-12T16:00:00.000Z</published>
    <updated>2022-05-24T03:28:37.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前几天想起自己基于（Netty &amp; Nacos）搭建的 Rpc 框架使用的是单体架构，一直想搭一个分布式架构的Rpc轮子。于是参考 <a href="https://space.bilibili.com/701029654?spm_id_from=333.788.b_765f7570696e666f.1">尚学堂编程俱乐部</a> 的 Rpc 代码，尝试了一次基于（Zookeeper &amp; RMI）的分布式架构的 Rpc 搭建。以下为本人整理的搭建过程（由于写这篇文章时时间紧张，模块的创建在文章中没有指明，那就贴个tree吧）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">D:.</span><br><span class="line">│  pom.xml</span><br><span class="line">│  RpcCnted.iml</span><br><span class="line">│  </span><br><span class="line">├─.idea</span><br><span class="line">│      .gitignore</span><br><span class="line">│      compiler.xml</span><br><span class="line">│      jarRepositories.xml</span><br><span class="line">│      misc.xml</span><br><span class="line">│      workspace.xml</span><br><span class="line">│      </span><br><span class="line">├─my_rpc</span><br><span class="line">│  │  pom.xml</span><br><span class="line">│  │  </span><br><span class="line">│  ├─my_rpc_api</span><br><span class="line">│  │  │  pom.xml</span><br><span class="line">│  │  │  </span><br><span class="line">│  │  └─src</span><br><span class="line">│  │      └─main</span><br><span class="line">│  │          └─java</span><br><span class="line">│  │              └─com</span><br><span class="line">│  │                  └─soul</span><br><span class="line">│  │                      └─service</span><br><span class="line">│  │                              CustomerService.java</span><br><span class="line">│  │                              UserService.java</span><br><span class="line">│  │                              </span><br><span class="line">│  ├─my_rpc_client</span><br><span class="line">│  │  │  pom.xml</span><br><span class="line">│  │  │  </span><br><span class="line">│  │  └─src</span><br><span class="line">│  │      └─main</span><br><span class="line">│  │          ├─java</span><br><span class="line">│  │          │  └─com</span><br><span class="line">│  │          │      └─soul</span><br><span class="line">│  │          │              TestRpcClient.java</span><br><span class="line">│  │          │              </span><br><span class="line">│  │          └─resources</span><br><span class="line">│  │                  soul-rpc.properties</span><br><span class="line">│  │                  </span><br><span class="line">│  └─my_rpc_server</span><br><span class="line">│      │  pom.xml</span><br><span class="line">│      │  </span><br><span class="line">│      └─src</span><br><span class="line">│          └─main</span><br><span class="line">│              ├─java</span><br><span class="line">│              │  └─com</span><br><span class="line">│              │      └─soul</span><br><span class="line">│              │          │  ServerApplication.java</span><br><span class="line">│              │          │  </span><br><span class="line">│              │          └─service</span><br><span class="line">│              │              └─impl</span><br><span class="line">│              │                      CustomerServiceImpl.java</span><br><span class="line">│              │                      UserServiceImpl.java</span><br><span class="line">│              │                      </span><br><span class="line">│              └─resources</span><br><span class="line">│                      soul-rpc-services.properties</span><br><span class="line">│                      soul-rpc.properties</span><br><span class="line">│                      </span><br><span class="line">└─rpc_soul_framework</span><br><span class="line">    │  pom.xml</span><br><span class="line">    │  </span><br><span class="line">    └─src</span><br><span class="line">        └─main</span><br><span class="line">            ├─java</span><br><span class="line">            │  └─com</span><br><span class="line">            │      └─soul</span><br><span class="line">            │          └─rpc</span><br><span class="line">            │              │  SoulRpcFactory.java</span><br><span class="line">            │              │  </span><br><span class="line">            │              ├─connection</span><br><span class="line">            │              │      ZkConnection.java</span><br><span class="line">            │              │      </span><br><span class="line">            │              └─registry</span><br><span class="line">            │                      SoulRpcRegistry.java</span><br><span class="line">            │                      </span><br><span class="line">            └─resources</span><br><span class="line">                    soul-rpc.properties</span><br><span class="line">                    </span><br></pre></td></tr></table></figure><h2 id="1-RMI-服务端"><a href="#1-RMI-服务端" class="headerlink" title="1. RMI 服务端"></a>1. RMI 服务端</h2><p>首先我们先创建一个服务端接口与其实现类。很 easy 是吧！</p><h3 id="1-1定义接口"><a href="#1-1定义接口" class="headerlink" title="1.1定义接口"></a>1.1定义接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RMI 的接口需要继承 Remote ，方法都需要抛出 RemoteException</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//根据用户名查询用户，返回一个字符串</span></span><br><span class="line">    String <span class="title function_">getUser</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2定义接口的实现类"><a href="#1-2定义接口的实现类" class="headerlink" title="1.2定义接口的实现类"></a>1.2定义接口的实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户服务实现类</span></span><br><span class="line"><span class="comment">// RMI 的接口实现类则继承 UnicastRemoteObject 就好 ，方法也需要抛出 RemoteException</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要查询的用户是：&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span>+name+<span class="string">&quot;\&quot;,\&quot;age\&quot;:20,\&quot;gender\&quot;,\&quot;男\&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-注册-RMI-服务"><a href="#2-注册-RMI-服务" class="headerlink" title="2. 注册 RMI 服务"></a>2. 注册 RMI 服务</h2><p>最简单的第一步做完了！迈出第一步，我们已经成功一半了！接下来我们需要把 RMI 的服务给注册到它的 <b>RMIRegistry</b> 中。那我们就定义一个类来专门注册RMI 的服务吧！</p><p>首先我们知道，RMIRegistry 存储服务的key是一个固定格式的字符串。</p><p>它的基本格式为 ：rmi格式为：<code>&quot;rmi://ip:port/interface&quot;</code> , 所以我们先把 ip 和 port 定义出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoulRpcRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK！我们开始注册，添加一个注册服务的方法，参数当然是服务 <code>interface</code> 了。这里因为我们使用的是 RMI ，定义的服务端接口都是Remote的子类，所以这里就使用泛型了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>，</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoulRpcRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceInterface - 服务接口类的对象。 如：com.soul.service.UserService.class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceObject    - 服务类实现类型的对象。 如：com.soul.service.impl.USerServiceImpl.class</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registryService</span><span class="params">(Class&lt;? extends Remote&gt; serviceInterface, Remote serviceObject)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//rmi = rmi://ip:port/com.soul.service.UserService</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rmi</span> <span class="operator">=</span> <span class="string">&quot;rmi://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/&quot;</span> + serviceInterface.getName();</span><br><span class="line">        <span class="comment">//注册服务对象</span></span><br><span class="line">        Naming.rebind(rmi, serviceObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的 RMI 注册服务也完成了！</p><h2 id="3-连接Zookeeper"><a href="#3-连接Zookeeper" class="headerlink" title="3. 连接Zookeeper"></a>3. 连接Zookeeper</h2><p>我们想要把 RMI 中存储的服务端信息 存到 Zookeeper 中，首先就要连接Zookeeper。</p><p>既然是Zookeeper的连接类，就需要 Zookeeper 的连接地址，还有连接的最大超时时间。教练教练，这个我会！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkConnection</span> &#123;</span><br><span class="line">    <span class="comment">//保存zk的地址，格式为：ip:port。如：192.168.169.130：2181</span></span><br><span class="line">    <span class="keyword">private</span> String zkServer;</span><br><span class="line">    <span class="comment">//连接超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sessionTimeout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在构造方法里初始化这两个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 Zookeeper连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ZkConnection</span><span class="params">(String zkServer, <span class="type">int</span> sessionTimeout)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.zkServer = zkServer;</span><br><span class="line">    <span class="built_in">this</span>.sessionTimeout = sessionTimeout;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置无参数 Zookeeper连接，给定默认值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ZkConnection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.zkServer = <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.sessionTimeout = <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后与 Zookeeper 进行连接 ，返回值类型Zookeeper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ZooKeeper <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(zkServer, sessionTimeout, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent watchedEvent)</span> &#123;</span><br><span class="line">            <span class="comment">//不知道写啥就先空着呗</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Zookeeper注册"><a href="#4-Zookeeper注册" class="headerlink" title="4. Zookeeper注册"></a>4. Zookeeper注册</h2><p>我们已经把服务注册到 RMI 的 Registry 中了，现在只需要把 RMI 中存储的 访问地址 URI 存储到 Zookeeper 中。</p><p>既然要注册，必然需要我们上一步的定义的 <code>ZkConnection</code> 来帮我们连接 Zookeeper，所以我们在 <code>SoulRpcRegistry</code> 中增加 <code>ZkConnection</code> 属性，并修改 <code>registryService</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Zookeeper连接对象</span></span><br><span class="line"><span class="keyword">private</span> ZkConnection connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册服务的方法</span></span><br><span class="line"><span class="comment"> * 1.拼接RMI的访问地址URI</span></span><br><span class="line"><span class="comment"> * 2.把访问地址URI存储在Zookeeper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceInterface - 服务接口类的对象。 如：com.soul.service.UserService.class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceObject - 服务类实现类型的对象。 如：com.soul.service.impl.USerServiceImpl.class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception - 抛出异常代表注册失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registryService</span><span class="params">(Class&lt;? extends Remote&gt; serviceInterface, Remote serviceObject)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">//rmi = rmi://ip:port/com.soul.service.UserService</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">rmi</span> <span class="operator">=</span> <span class="string">&quot;rmi://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/&quot;</span> + serviceInterface.getName();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//把服务对象在RMI的registry中注册</span></span><br><span class="line">    Naming.rebind(rmi, serviceObject);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拼接一个有规则的zk存储节点命名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/soul/rpc/&quot;</span> + serviceInterface.getName();</span><br><span class="line">    connection.getConnection().create(path, rmi.getBytes(),</span><br><span class="line">                                      ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就大功告成了？no no no！我们只在 Zookeeper 中存服务进去可不行，也得取出来用呀，不然我这不白存啦？</p><p>那我们就在 <code>SoulRpcRegistry</code> 中添加一个取的方法，首先拿到节点数据，然后再去 <code>RMIRegistry</code> 中拿到客户端的代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据服务接口类型访问zk，获取RMI的远程代理对象</span></span><br><span class="line"><span class="comment"> * 1.拼接一个zk中的节点名称</span></span><br><span class="line"><span class="comment"> * 2.访问zk，查询节点中存储的数据</span></span><br><span class="line"><span class="comment"> * 3.根据查询的结果，创建一个代理对象。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Remote</span>&gt; T <span class="title function_">getServiceProxy</span><span class="params">(Class&lt;T&gt; serviceInterface)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException, NotBoundException &#123;</span><br><span class="line">    <span class="comment">//拼接zk中的节点名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/soul/rpc/&quot;</span> + serviceInterface.getName();</span><br><span class="line">    <span class="comment">//查询节点中存储的数据</span></span><br><span class="line">    <span class="type">byte</span>[] datas = connection.getConnection().getData(path, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//把查询的字节数组，翻译成RMI的访问地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">rmi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(datas);</span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="keyword">return</span> (T) Naming.lookup(rmi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样整个注册器我们就写好啦！</p><h2 id="5-初始化参数"><a href="#5-初始化参数" class="headerlink" title="5. 初始化参数"></a>5. 初始化参数</h2><h3 id="5-1-参数配置文件"><a href="#5-1-参数配置文件" class="headerlink" title="5.1 参数配置文件"></a>5.1 参数配置文件</h3><p>我们知道 ，无论是 RMI 还是 Zookeeper ，都需要一些固定格式的参数来使用，比如 ip、port等。这些参数一旦发生变化，我们想要修改就会变得很麻烦，需要去代码里面疯狂 Ctrl + F ，所以最好使用一个配置文件来存储这些参数的值。</p><p>定义一个配置文件 (.properties) ：</p><p><code>soul-rpc.properties:</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry.ip</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">registry.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="attr">zk.server</span>=<span class="string">192.168.169.130:2181</span></span><br><span class="line"><span class="attr">zk.sessionTimeout</span>=<span class="string">20000</span></span><br></pre></td></tr></table></figure><h3 id="5-2-加载配置文件"><a href="#5-2-加载配置文件" class="headerlink" title="5.2 加载配置文件"></a>5.2 加载配置文件</h3><p>好嘞，我们参数的配置文件定义好了，接下来有个新问题：什么时候加载配置文件呢？那肯定是在使用 Zookeeper 或 RMI 之前呀！</p><p>那我们就定义一个服务端的入口类呗，在入口类的代码块或者构造方法中加载配置文件不就得了！而且要记得我们 RMI 的注册器也还没创建呢，可以在这个入口类中一并创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoulRpcFactory</span> &#123;</span><br><span class="line">    <span class="comment">//保存配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="comment">//连接对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ZkConnection connection;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SoulRpcRegistry registry;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化过程。</span></span><br><span class="line"><span class="comment">     * 固定逻辑：在classpath下，配置文件。命名为: soul-rpc.properties</span></span><br><span class="line"><span class="comment">     * 配置文件结构固化：</span></span><br><span class="line"><span class="comment">     *  registry.ip = 服务端Ip地址，默认为 localhost</span></span><br><span class="line"><span class="comment">     *  registry.port = 服务端端口号，默认为 9090</span></span><br><span class="line"><span class="comment">     *  zk.server = Zookeeper访问地址，默认为 localhost:2181</span></span><br><span class="line"><span class="comment">     *  zk.sessionTimeout = Zookeeper连接会话超时，默认10s</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取classpath类路径下的配置文件输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> SoulRpcFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;soul-rpc.properties&quot;</span>);</span><br><span class="line">            <span class="comment">//读取配置文件，初始化配置对象</span></span><br><span class="line">            config.load(input);</span><br><span class="line">            <span class="comment">//获取服务端ip</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">serverIp</span> <span class="operator">=</span> config.getProperty(<span class="string">&quot;registry.ip&quot;</span>) == <span class="literal">null</span> </span><br><span class="line">                ? <span class="string">&quot;localhost&quot;</span> : config.getProperty(<span class="string">&quot;registry.ip&quot;</span>);</span><br><span class="line">            <span class="comment">//获取服务端port</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> config.getProperty(<span class="string">&quot;registry.port&quot;</span>)  == <span class="literal">null</span> </span><br><span class="line">                ? <span class="number">9090</span> : Integer.parseInt(config.getProperty(<span class="string">&quot;registry.port&quot;</span>));</span><br><span class="line">            <span class="comment">//获取zk服务器地址</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">zkServer</span> <span class="operator">=</span> config.getProperty(<span class="string">&quot;zk.server&quot;</span>) == <span class="literal">null</span> </span><br><span class="line">                ? <span class="string">&quot;localhost:2181&quot;</span> : config.getProperty(<span class="string">&quot;zk.server&quot;</span>);</span><br><span class="line">            <span class="comment">//获取zk客户端会话超时时间</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">zkSessionTimeout</span> <span class="operator">=</span> config.getProperty(<span class="string">&quot;zk.sessionTimeout&quot;</span>) == <span class="literal">null</span> </span><br><span class="line">                ? <span class="number">10000</span> : Integer.parseInt(config.getProperty(<span class="string">&quot;zk.sessionTimeout&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建连接对象</span></span><br><span class="line">            connection = <span class="keyword">new</span> <span class="title class_">ZkConnection</span>(zkServer,zkSessionTimeout);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建注册器对象</span></span><br><span class="line">            registry = <span class="keyword">new</span> <span class="title class_">SoulRpcRegistry</span>(serverIp,serverPort,connection);</span><br><span class="line">            <span class="comment">//创建RMI的注册器</span></span><br><span class="line">            LocateRegistry.createRegistry(serverPort);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//初始化代码块发生异常的时候，抛出错误，中断虚拟机</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionInInitializerError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是入口类，那我们可以把 <code>SoulRpcRegistry</code> 的注册服务的方法 和 获取代理对象的方法 也交给这个入口类管理，那就简简单单在这个类中添加两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提供一个快速的注册服务的静态工具方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerService</span><span class="params">(Class&lt;? extends Remote&gt; serviceInterface, Remote serviceObject)</span> <span class="keyword">throws</span> InterruptedException, IOException, KeeperException &#123;</span><br><span class="line">    registry.registryService(serviceInterface,serviceObject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提供一个快速的拿到客户端代理对象的静态工具方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Remote</span>&gt; T <span class="title function_">getServiceProxy</span><span class="params">(Class&lt;T&gt; serviceInterface)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="keyword">return</span> registry.getServiceProxy(serviceInterface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK! 小功告成！接下来测试一下服务端能否使用吧！</p><h2 id="6-测试服务端"><a href="#6-测试服务端" class="headerlink" title="6. 测试服务端"></a>6. 测试服务端</h2><p>写个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个服务对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="comment">//注册</span></span><br><span class="line">        SoulRpcFactory.registerService(UserService.class, userService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动！😭：发现报错</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc(z&r)/1.png"></img></p><p>原来是父节点没创建呀，搞什么啊，就这？直接加个判断解决它！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//--此处代码省略--</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化zk中的父节点/soul/rpc</span></span><br><span class="line">        List&lt;String&gt; children = connection.getConnection().getChildren(<span class="string">&quot;/&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 不存在子节点 /soul</span></span><br><span class="line">        <span class="keyword">if</span>(!children.contains(<span class="string">&quot;soul&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 创建节点/soul</span></span><br><span class="line">            connection.getConnection()</span><br><span class="line">                .create(<span class="string">&quot;/soul&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; soulChildren = connection.getConnection().getChildren(<span class="string">&quot;/soul&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(!soulChildren.contains(<span class="string">&quot;rpc&quot;</span>))&#123;</span><br><span class="line">            connection.getConnection()</span><br><span class="line">                .create(<span class="string">&quot;/soul/rpc&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//初始化代码块发生异常的时候，抛出错误，中断虚拟机</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionInInitializerError</span>(e);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美启动</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc(z&r)/2.png"></img></p><p>接下来去Zookeeper 瞅瞅，发现成功存入。那就查看一下value值。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc(z&r)/3.png"></img></p><h2 id="7-服务端启动问题"><a href="#7-服务端启动问题" class="headerlink" title="7. 服务端启动问题"></a>7. 服务端启动问题</h2><h3 id="7-1-增加服务配置文件"><a href="#7-1-增加服务配置文件" class="headerlink" title="7.1 增加服务配置文件"></a>7.1 增加服务配置文件</h3><p>在上一步我们的服务端启动成功了，但是有个小问题哈，这时候我们只有一个 <code>UserService</code> 服务。当我们有多个服务时，我们难道要一个个在服务端一个个的注册调用吗？这也太麻烦了吧，所以我们仍然是使用配置文件来帮我们解决这个问题。</p><h4 id="7-1-1-服务配置文件"><a href="#7-1-1-服务配置文件" class="headerlink" title="7.1.1 服务配置文件"></a>7.1.1 服务配置文件</h4><p><code>soul-rpc-services.properties:</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件格式是：接口全命名=实现类全命名</span></span><br><span class="line"><span class="attr">com.soul.service.UserService</span>=<span class="string">com.soul.service.impl.UserServiceImpl</span></span><br><span class="line"><span class="attr">com.soul.service.CustomerService</span>=<span class="string">com.soul.service.impl.CustomerServiceImpl</span></span><br></pre></td></tr></table></figure><h4 id="7-1-2-加载配置文件"><a href="#7-1-2-加载配置文件" class="headerlink" title="7.1.2 加载配置文件"></a>7.1.2 加载配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoulRpcFactory</span> &#123;</span><br><span class="line">    <span class="comment">//代码省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于读取初始化的配置对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Properties</span> <span class="variable">services</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//代码省略</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿到配置文件(soul-rpc-services.properties)。如果有则自动初始化，没有则忽略后续逻辑</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">servicesInput</span> <span class="operator">=</span> SoulRpcFactory.class</span><br><span class="line">                    .getClassLoader().getResourceAsStream(<span class="string">&quot;soul-rpc-services.properties&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (servicesInput != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//有配置 初始化</span></span><br><span class="line">                services.load(servicesInput);</span><br><span class="line">                <span class="comment">//遍历集合services</span></span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Object,Object&gt; entry : services.entrySet())&#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> services.get(key);</span><br><span class="line">                    Class&lt;Remote&gt; serviceInterface = (Class&lt;Remote&gt;) Class.forName(key.toString());</span><br><span class="line">                    <span class="type">Remote</span> <span class="variable">serviceObject</span> <span class="operator">=</span> (Remote) Class.forName(value.toString()).newInstance();</span><br><span class="line">                    <span class="comment">//有了接口的类对象以及服务的对象后，可以开始注册</span></span><br><span class="line">                    registry.registryService(serviceInterface,serviceObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionInInitializerError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-3-修改启动类"><a href="#7-1-3-修改启动类" class="headerlink" title="7.1.3 修改启动类"></a>7.1.3 修改启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.soul.rpc.SoulRpcFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-节点已创建问题"><a href="#7-2-节点已创建问题" class="headerlink" title="7.2 节点已创建问题"></a>7.2 节点已创建问题</h3><p>如果我们重复创建同一个节点，会报这个错误。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc(z&r)/4.png"></img></p><p>那就想策略吧：每次创建前先进行一次查询判断，如果要创建的节点已经存在了，就先删除掉这个节点，然后重新创建新的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoulRpcRegistry</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//代码省略</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registryService</span><span class="params">(Class&lt;? extends Remote&gt; serviceInterface, Remote serviceObject)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//rmi = rmi://ip:port/com.soul.service.UserService</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rmi</span> <span class="operator">=</span> <span class="string">&quot;rmi://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/&quot;</span> + serviceInterface.getName();</span><br><span class="line">        <span class="comment">//拼接一个有规则的zk存储节点命名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/soul/rpc/&quot;</span> + serviceInterface.getName();</span><br><span class="line">        <span class="comment">//把服务对象在RMI的registry中注册</span></span><br><span class="line">        Naming.rebind(rmi, serviceObject);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; children = connection.getConnection().getChildren(<span class="string">&quot;/soul/rpc&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//如果节点已经存在，删除掉</span></span><br><span class="line">        <span class="keyword">if</span> (children.contains(serviceInterface.getName()))&#123;</span><br><span class="line">            <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">            connection.getConnection().getData(path,<span class="literal">false</span>,stat);</span><br><span class="line">            connection.getConnection().delete(path,stat.getCversion());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注册到Zookeeper</span></span><br><span class="line">        connection.getConnection().create(path, rmi.getBytes(),</span><br><span class="line">                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//代码省略</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次启动，成功运行！</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc(z&r)/5.png"></img></p><h2 id="8-RMI-客户端"><a href="#8-RMI-客户端" class="headerlink" title="8. RMI 客户端"></a>8. RMI 客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试基于自定义Rpc框架的客户端开发</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRpcClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过自定义框架，连接zk，获取接口的动态代理对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> SoulRpcFactory.getServiceProxy(UserService.class);</span><br><span class="line">            System.out.println(userService.getClass().getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> userService.getUser(<span class="string">&quot;SoulChay&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;远程服务返回查询结果：&quot;</span> + res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接启动，直接成功！（不成功的也不会放上来是叭）</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/rpc(z&r)/6.png"></img></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这样我们基于 (Zookeeper &amp; RMI) 的简单RPC框架就搭建好了。</p><p>之后我会把它完善一下放在GitHub上，文章有不对的地方或者您有什么想法都欢迎评论留言。</p><p>感谢阅读到最后！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前几天想起自己基于（Netty &amp;amp; Nacos）搭建的 Rpc 框架使用的是单体架构，一直想搭一个分布式架构的Rpc</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper-note</title>
    <link href="http://example.com/2022/03/10/Zookeeper/"/>
    <id>http://example.com/2022/03/10/Zookeeper/</id>
    <published>2022-03-09T16:00:00.000Z</published>
    <updated>2022-05-24T04:56:32.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Zookeeper介绍"><a href="#1-Zookeeper介绍" class="headerlink" title="1.Zookeeper介绍"></a>1.Zookeeper介绍</h2><ul><li>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。</li><li>Zookeeper从设计模式角度来理解：是基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应。</li></ul><h3 id="1-1-Zookeeper结构"><a href="#1-1-Zookeeper结构" class="headerlink" title="1.1 Zookeeper结构"></a>1.1 Zookeeper结构</h3><p>Zookeeper 数据模型的结构与Unix文件系统很类似，整体上可以看做是一棵树，每个节点称作一个ZNode。每一个ZNode默认能够存储1MB的数据，每个ZNode都可以通过其路径唯一标识。</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper1.png"></img></p><h3 id="1-2-配置-Zookeeper"><a href="#1-2-配置-Zookeeper" class="headerlink" title="1.2 配置 Zookeeper"></a>1.2 配置 Zookeeper</h3><p>Zookeeper 在启动时会去 conf 目录下寻找 zoo.cfg 的配置文件。所以我们需要进入到conf目录拷贝一个zoo_sample.cfg并完成配置 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入到conf目录</span></span><br><span class="line">cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拷贝</span></span><br><span class="line">cp  zoo_sample.cfg  zoo.cfg</span><br></pre></td></tr></table></figure><p>修改zoo.cfg 中的 dataDir</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/opt/zookeeper/zkdata</span><br></pre></td></tr></table></figure><h3 id="1-3-Zookeeper常用命令"><a href="#1-3-Zookeeper常用命令" class="headerlink" title="1.3 Zookeeper常用命令"></a>1.3 Zookeeper常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">连接ZooKeeper服务端</span></span><br><span class="line">./zkCli.sh –server ip:port</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">断开连接</span></span><br><span class="line">quit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示指定目录下节点</span></span><br><span class="line">ls 目录</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建节点</span></span><br><span class="line">create /节点path value</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取节点值</span></span><br><span class="line">get /节点path</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置节点值</span></span><br><span class="line">set /节点path value</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除单个节点</span></span><br><span class="line">delete /节点path</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除带有子节点的节点</span></span><br><span class="line">deleteall /节点path</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建临时节点</span></span><br><span class="line">create -e /节点path value</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建顺序节点</span></span><br><span class="line">create -s /节点path value</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询节点详细信息</span></span><br><span class="line">ls –s /节点path </span><br></pre></td></tr></table></figure><h2 id="2-Curator-API"><a href="#2-Curator-API" class="headerlink" title="2.Curator API"></a>2.Curator API</h2><p>我们在Java客户端操作 Zookeeper 有两种方式：①使用原生代码；②使用Curator。</p><p>这里介绍Curator，Zookeeper原生代码的使用可参考我另一篇文章 RPC(Zookeeper &amp; RMI)。</p><ul><li>Curator 是一套开源的 Zookeeper客户端框架。</li><li>它帮助我们在Zookeeper原生API基础上进行封装，实现一些开发细节。包括接连重连、反复注册Watcher和NodeExistsException等。</li><li>除此之外，Curator还提供了Zookeeper的各种应用场景：Recipe、共享锁服务、Master选举机制和分布式计数器等。</li></ul><h3 id="2-1-建立连接"><a href="#2-1-建立连接" class="headerlink" title="2.1 建立连接"></a>2.1 建立连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//先声明重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);<span class="comment">//睡3秒尝试一次连接,最多尝试10次</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * @param connectString        连接字符串: &quot;192.168.169.130:2181,192.168.169.131:2181&quot;</span></span><br><span class="line"><span class="comment">         * @param sessionTimeoutMs     会话超时时间,单位毫秒</span></span><br><span class="line"><span class="comment">         * @param connectionTimeoutMs  连接超时时间,单位毫秒</span></span><br><span class="line"><span class="comment">         * @param retryPolicy          重试策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client1</span> <span class="operator">=</span> CuratorFrameworkFactory</span><br><span class="line">                .newClient(<span class="string">&quot;192.168.169.130:2181&quot;</span>, <span class="number">60</span> * <span class="number">1000</span>, <span class="number">15</span> * <span class="number">1000</span>, retryPolicy);</span><br><span class="line">        <span class="comment">//开启连接</span></span><br><span class="line">        client1.start();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-创建节点"><a href="#2-2-创建节点" class="headerlink" title="2.2 创建节点"></a>2.2 创建节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);<span class="comment">//重试策略</span></span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建节点 持久/临时  顺序/非顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.基本创建</span></span><br><span class="line">        <span class="comment">//如果创建节点没有指定数据,则默认将当前客户端的ip作为数据存储</span></span><br><span class="line">        client.create().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建节点,带有数据</span></span><br><span class="line">        client.create().forPath(<span class="string">&quot;/app2&quot;</span>,<span class="string">&quot;SOUL&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建节点,带有节点类型</span></span><br><span class="line">        <span class="comment">//节点默认持久化</span></span><br><span class="line">        client.create().withMode(CreateMode.PERSISTENT).forPath(<span class="string">&quot;/app3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建多级节点</span></span><br><span class="line">        <span class="comment">//creatingParentsIfNeeded():如果父节点不存在则创建父节点</span></span><br><span class="line">        client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(<span class="string">&quot;/app4/p1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-查询节点"><a href="#2-3-查询节点" class="headerlink" title="2.3 查询节点"></a>2.3 查询节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//查询数据,对应linux:get</span></span><br><span class="line">        <span class="type">byte</span>[] data = client.getData().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询子节点,对应linux:ls</span></span><br><span class="line">        List&lt;String&gt; path = client.getChildren().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询子节点状态信息,对应linux:ls -s</span></span><br><span class="line">        <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">        client.getData().storingStatIn(status).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        System.out.println(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-修改节点"><a href="#2-4-修改节点" class="headerlink" title="2.4 修改节点"></a>2.4 修改节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1.基本修改</span></span><br><span class="line">        client.setData().forPath(<span class="string">&quot;/app1&quot;</span>,<span class="string">&quot;soul1&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据版本修改：为了避免多个客户端修改冲突问题，需要加入节点状态信息中的version</span></span><br><span class="line">        <span class="type">Stat</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">        client.getData().storingStatIn(status).forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">version</span> <span class="operator">=</span> status.getVersion();</span><br><span class="line">        client.setData().withVersion(version).forPath(<span class="string">&quot;/app1&quot;</span>,<span class="string">&quot;soul2&quot;</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-删除节点"><a href="#2-5-删除节点" class="headerlink" title="2.5 删除节点"></a>2.5 删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1.删除单个节点</span></span><br><span class="line">        client.delete().forPath(<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        <span class="comment">//2.删除带有子节点的节点</span></span><br><span class="line">        client.delete().deletingChildrenIfNeeded().forPath(<span class="string">&quot;/app4&quot;</span>);</span><br><span class="line">        <span class="comment">//3.保证删除节点</span></span><br><span class="line">        client.delete().guaranteed().forPath(<span class="string">&quot;/app2&quot;</span>);</span><br><span class="line">        <span class="comment">//4.带有回调函数的删除</span></span><br><span class="line">        client.delete().guaranteed().inBackground(<span class="keyword">new</span> <span class="title class_">BackgroundCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(CuratorFramework curatorFramework,</span></span><br><span class="line"><span class="params">                                      CuratorEvent curatorEvent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;被删除了= =&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forPath(<span class="string">&quot;/app3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-Watch事务监听"><a href="#2-6-Watch事务监听" class="headerlink" title="2.6 Watch事务监听"></a>2.6 Watch事务监听</h3><p>Zookeeper 允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知到感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性</p><p>ZooKeeper 中引入了Watcher机制来实现了发布&#x2F;订阅功能，能够让多个订阅者同时监听某一个对象，当一个对象自身状态变化时，会通知所有订阅者。</p><p>Curator API中引入了 Cache 来实现对 ZooKeeper 服务端事件的监听。</p><p>Zookeeper 下有几个客户端，他们通过 Curator 来进行一系列的操作</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper2.png"></img></p><p>Zookeeper提供了三种Watcher：</p><ul><li>NodeCache：监听指定的ZNode节点。</li><li>PathChildrenCache：监听指定ZNode节点的子节点（不包含指定节点）。</li><li>TreeCache：监听指定节点及其子孙节点。</li></ul><h4 id="2-6-1-NodeCache"><a href="#2-6-1-NodeCache" class="headerlink" title="2.6.1 NodeCache"></a>2.6.1 NodeCache</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorWatcherTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NodeCache:给指定一个节点注册监听器</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建NodeCache对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">NodeCache</span> <span class="variable">nodeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeCache</span>(client,<span class="string">&quot;/app1&quot;</span>);</span><br><span class="line">        <span class="comment">//注册监听</span></span><br><span class="line">        nodeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">NodeCacheListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Node changed&quot;</span>);</span><br><span class="line">                <span class="comment">//获取修改节点后的数据</span></span><br><span class="line">                <span class="type">byte</span>[] data = nodeCache.getCurrentData().getData();</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启监听: 如果设置为true,则开启监听时，加载缓冲数据</span></span><br><span class="line">        nodeCache.start(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为执行这个方法后连接断开，所以在测试时使用循环保证这个连接不会断开</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6-1-PathChildrenCache"><a href="#2-6-1-PathChildrenCache" class="headerlink" title="2.6.1 PathChildrenCache"></a>2.6.1 PathChildrenCache</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorWatcherTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PathChildrenCache:监听某个节点的所有子节点(不包括被监听的节点)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建PathChildrenCache对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PathChildrenCache</span> <span class="variable">pathChildrenCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathChildrenCache</span>(client,<span class="string">&quot;/app2&quot;</span>,<span class="literal">true</span>);<span class="comment">//是否缓存一些状态信息</span></span><br><span class="line">        <span class="comment">//绑定监听器</span></span><br><span class="line">        pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">PathChildrenCacheListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework curatorFramework,</span></span><br><span class="line"><span class="params">                                   PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(event);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//监听子节点的数据变更，并且拿到变更后的数据</span></span><br><span class="line">                <span class="comment">//1.获取类型</span></span><br><span class="line">                PathChildrenCacheEvent.<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> event.getType();</span><br><span class="line">                <span class="comment">//2.判断类型是否是update</span></span><br><span class="line">                <span class="keyword">if</span> (type.equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node updated&quot;</span>);</span><br><span class="line">                    <span class="type">byte</span>[] data = event.getData().getData();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type.equals(PathChildrenCacheEvent.Type.CHILD_ADDED))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node added&quot;</span>);</span><br><span class="line">                    <span class="type">byte</span>[] data = event.getData().getData();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type.equals(PathChildrenCacheEvent.Type.CHILD_REMOVED))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node removed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启监听</span></span><br><span class="line">        pathChildrenCache.start();</span><br><span class="line">        <span class="comment">//因为执行这个方法后连接断开，所以在测试时使用循环保证这个连接不会断开</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6-3-TreeCache"><a href="#2-6-3-TreeCache" class="headerlink" title="2.6.3 TreeCache"></a>2.6.3 TreeCache</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorWatcherTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//重试策略</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).namespace(<span class="string">&quot;soul&quot;</span>).build(); <span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TreeCache:监听某个节点及其所有子节点(包括被监听的节点)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建PathChildrenCache对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">TreeCache</span> <span class="variable">treeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeCache</span>(client,<span class="string">&quot;/app3&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定监听器</span></span><br><span class="line">        treeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">TreeCacheListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework curatorFramework, </span></span><br><span class="line"><span class="params">                                   TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Node changed&quot;</span>);</span><br><span class="line">                System.out.println(event);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//监听子节点的数据变更，并且拿到变更后的数据</span></span><br><span class="line">                <span class="comment">//1.获取类型</span></span><br><span class="line">                TreeCacheEvent.<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> event.getType();</span><br><span class="line">                <span class="comment">//2.判断类型是否是update</span></span><br><span class="line">                <span class="keyword">if</span> (type.equals(TreeCacheEvent.Type.NODE_UPDATED))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node updated&quot;</span>);</span><br><span class="line">                    <span class="type">byte</span>[] data = event.getData().getData();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type.equals(TreeCacheEvent.Type.NODE_ADDED))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node added&quot;</span>);</span><br><span class="line">                    <span class="type">byte</span>[] data = event.getData().getData();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type.equals(TreeCacheEvent.Type.NODE_REMOVED))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node removed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//开启监听</span></span><br><span class="line">        treeCache.start();</span><br><span class="line">        <span class="comment">//因为执行这个方法后连接断开，所以在测试时使用循环保证这个连接不会断开</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (client!=<span class="literal">null</span>)&#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7-Zookeeper分布式锁"><a href="#2-7-Zookeeper分布式锁" class="headerlink" title="2.7  Zookeeper分布式锁"></a>2.7  Zookeeper分布式锁</h3><h4 id="2-7-1-分布式锁引入"><a href="#2-7-1-分布式锁引入" class="headerlink" title="2.7.1 分布式锁引入"></a>2.7.1 分布式锁引入</h4><p>在我们进行单机应用开发，涉及并发同步的时候，我们往往采用synchronized或者lock的方式来解决多线程之间代码同步的问题，这时多线程的运行都是在同一个JVM之下，没有任何问题。</p><p>但是当我们的应用是分布式集群工作的情况下，数据多JVM下的工作环境，跨JVM之间已经无法通过多线程的锁来解决问题，那就需要一种更加高级的锁机制来处理<b>跨机器的进程之间的数据同步问题</b>——这就是分布式锁。</p><p>单一JVM下的工作环境：</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper3.png"></img></p><p>跨JVM下的工作环境：</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper4.png"></img></p><p>分布式锁有以下几种实现方式：</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper5.png"></img></p><h4 id="2-7-2-分布式锁原理"><a href="#2-7-2-分布式锁原理" class="headerlink" title="2.7.2 分布式锁原理"></a>2.7.2 分布式锁原理</h4><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper6.png"></img></p><p>核心思想：当客户端要获取锁，则创建一节点，使用完锁，则删除该节点。</p><p>1.客户端获取锁的时候，在lock节点下创建<b>临时顺序</b>节点。</p><p>2.然后获取lock下面的所有子节点，客户端获取到所有的子节点后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。使用完锁后，将该节点删除。</p><p>3.如果发现自己创建的节点并非lock所有节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，用来监听这个节点的删除事件。</p><p>4.如果发现比自己小的那个节点被删除，则客户端的Watcher会收到相应的通知，此时再次判断自己创建的节点是否是lock节点中序号最小的，如果是则获取到了锁；如果不是则重复以上步骤继续获取比自己小的节点并对其注册一个删除监听。</p><h4 id="2-7-3-分布式锁的应用"><a href="#2-7-3-分布式锁的应用" class="headerlink" title="2.7.3 分布式锁的应用"></a>2.7.3 分布式锁的应用</h4><p>12306购票案例</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper7.png"></img></p><h5 id="2-7-3-1-客户端具体实现"><a href="#2-7-3-1-客户端具体实现" class="headerlink" title="2.7.3.1 客户端具体实现"></a>2.7.3.1 客户端具体实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tickets12306</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> InterProcessMutex lock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tickets12306</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端</span></span><br><span class="line">        <span class="type">RetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;192.168.169.130:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(retryPolicy).build();<span class="comment">//可以加上命名空间,表示节点的根目录</span></span><br><span class="line">        client.start();</span><br><span class="line">        <span class="comment">//创建分布式锁</span></span><br><span class="line">        lock = <span class="keyword">new</span> <span class="title class_">InterProcessMutex</span>(client,<span class="string">&quot;/lock&quot;</span>); <span class="comment">//参数：client + path</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//线程获取锁（每3s获取一次锁）</span></span><br><span class="line">                lock.acquire(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;:&quot;</span> + tickets);</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    tickets--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//线程释放锁</span></span><br><span class="line">                    lock.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-7-3-2-客户端的调用"><a href="#2-7-3-2-客户端的调用" class="headerlink" title="2.7.3.2 客户端的调用"></a>2.7.3.2 客户端的调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Tickets12306</span> <span class="variable">tickets12306</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tickets12306</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建客户端</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tickets12306,<span class="string">&quot;飞猪&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tickets12306,<span class="string">&quot;携程&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Zookeeper集群"><a href="#3-Zookeeper集群" class="headerlink" title="3  Zookeeper集群"></a>3  Zookeeper集群</h2><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper8.png"></img></p><h3 id="3-1-Leader-选举"><a href="#3-1-Leader-选举" class="headerlink" title="3.1 Leader 选举"></a>3.1 Leader 选举</h3><p>Leader选举是保证分布式数据一致性的关键所在。当Zookeeper集群中的一台服务器出现以下两种情况之一时，需要进入Leader选举：(1) 服务器初始化启动；(2) 服务器运行期间无法和Leader保持连接。</p><h4 id="3-1-1-集群中的服务器状态"><a href="#3-1-1-集群中的服务器状态" class="headerlink" title="3.1.1 集群中的服务器状态"></a>3.1.1 集群中的服务器状态</h4><ul><li><b>LOOKING</b> ：寻找 Leader状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入Leader选举状态。</li><li><b>LEADING</b> ：领导者状态。表明当前服务器角色是Leader。</li><li><b>FOLLOWING</b> ：跟随者状态。表明当前服务器角色是Follower。</li><li><b>OBSERVING</b> ：观察者状态。表明当前服务器角色是Observer。该节点不参与 Leader 选举。</li></ul><h4 id="3-1-2-启动时期Leader选举"><a href="#3-1-2-启动时期Leader选举" class="headerlink" title="3.1.2 启动时期Leader选举"></a>3.1.2 启动时期Leader选举</h4><p>　若进行Leader选举，则至少需要两台机器，这里选取3台机器组成的服务器集群为例。在集群初始化阶段，当有一台服务器Server1启动时，其单独无法进行和完成Leader选举，当第二台服务器Server2启动时，此时两台机器可以相互通信，每台机器都试图找到Leader，于是进入Leader选举过程。选举过程如下</p><ol><li><b>每个Server发出一个投票</b>。由于是初始情况，Server1和Server2都会将自己作为Leader服务器来进行投票，每次投票会包含所推举的服务器的 <b>myid(服务器id) </b> 和 <b>ZXID（数据权重id）</b>，使用(myid, ZXID)来表示，此时Server1的投票为(1, 0)，Server2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。</li><li><b>接受来自各个服务器的投票</b>。集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自LOOKING状态的服务器。</li><li><b>处理投票</b>。针对每一个投票，服务器都需要将别人的投票和自己的投票进行PK，PK规则如下<ol><li>优先检查 <b>ZXID</b>。ZXID比较大的服务器优先作为Leader。</li><li>如果ZXID相同，那么就比较 <b>myid</b>。myid较大的服务器作为Leader服务器。</li><li>对于Server1而言，它的投票是(1, 0)，接收Server2的投票为(2, 0)，首先会比较两者的ZXID，均为0，再比较myid，此时Server2的myid最大，于是更新自己的投票为(2, 0)，然后重新投票，对于Server2而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。</li></ol></li><li><b>统计投票</b>。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于Server1、Server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了Leader。</li><li><b>改变服务器状态</b>。一旦确定了Leader，每个服务器就会更新自己的状态，如果是Follower，那么就变更为FOLLOWING，如果是Leader，就变更为LEADING。</li></ol><h4 id="3-1-3-运行时期Leader选举"><a href="#3-1-3-运行时期Leader选举" class="headerlink" title="3.1.3 运行时期Leader选举"></a>3.1.3 运行时期Leader选举</h4><p>在Zookeeper运行期间，Leader与非Leader服务器各司其职，即便当有非Leader服务器宕机或新加入，此时也不会影响Leader，但是一旦Leader服务器挂了，那么整个集群将暂停对外服务，进入新一轮Leader选举，其过程和启动时期的Leader选举过程基本一致。</p><h4 id="3-1-4-Leader选举算法分析"><a href="#3-1-4-Leader选举算法分析" class="headerlink" title="3.1.4 Leader选举算法分析"></a>3.1.4 Leader选举算法分析</h4><p>在3.4.0后的Zookeeper的版本只保留了TCP版本的FastLeaderElection选举算法。当一台机器进入Leader选举时，当前集群可能会处于以下两种状态：</p><p>① 集群中已经存在Leader：对于集群中已经存在Leader而言，此种情况一般都是某台机器启动得较晚，在其启动之前，集群已经在正常工作，对这种情况，该机器试图去选举Leader时，会被告知当前服务器的Leader信息，对于该机器而言，仅仅需要和Leader机器建立起连接，并进行状态同步即可。</p><p>② 集群中不存在Leader：在集群中不存在Leader情况下则会相对复杂，其步骤如下</p><ol><li><p><strong>第一次投票</strong>。无论哪种导致进行Leader选举，集群的所有机器都处于试图选举出一个Leader的状态，即LOOKING状态，LOOKING机器会向所有其他机器发送消息，该消息称为投票。投票中包含了SID（服务器的唯一标识）和ZXID（事务ID），(SID, ZXID)形式来标识一次投票信息。假定Zookeeper由5台机器组成，SID分别为1、2、3、4、5，ZXID分别为9、9、9、8、8，并且此时SID为2的机器是Leader机器，某一时刻，1、2所在机器出现故障，因此集群开始进行Leader选举。在第一次投票时，每台机器都会将自己作为投票对象，于是SID为3、4、5的机器投票情况分别为(3, 9)，(4, 8)， (5, 8)。</p></li><li><p><strong>变更投票</strong>。每台机器发出投票后，也会收到其他机器的投票，每台机器会根据一定规则来处理收到的其他机器的投票，并以此来决定是否需要变更自己的投票，这个规则也是整个Leader选举算法的核心所在，其中术语描述如下</p><ul><li><b>vote_sid</b>：接收到的投票中所推举Leader服务器的SID。</li><li><b>vote_zxid</b>：接收到的投票中所推举Leader服务器的ZXID。</li><li><b>self_sid</b>：当前服务器自己的SID。</li><li><b>self_zxid</b>：当前服务器自己的ZXID。</li></ul><p>每次对收到的投票的处理，都是对(vote_sid, vote_zxid) 和 (self_sid, self_zxid)对比的过程。</p><ul><li>规则一：如果vote_zxid大于self_zxid，就认可当前收到的投票，并再次将该投票发送出去。</li><li>规则二：如果vote_zxid小于self_zxid，那么坚持自己的投票，不做任何变更。</li><li>规则三：如果vote_zxid等于self_zxid，那么就对比两者的SID，如果vote_sid大于self_sid，那么就认可当前收到的投票，并再次将该投票发送出去。</li><li>规则四：如果vote_zxid等于self_zxid，并且vote_sid小于self_sid，那么坚持自己的投票，不做任何变更。</li></ul><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/zookeeper/zookeeper9.png"></img></p></li><li><p><strong>确定Leader</strong>。经过第二轮投票后，集群中的每台机器都会再次接收到其他机器的投票，然后开始统计投票，如果一台机器收到了超过半数的相同投票，那么这个投票对应的SID机器即为Leader。此时Server3将成为Leader。</p></li></ol><p>由上面规则可知，通常那台服务器上的数据越新（ZXID会越大），其成为Leader的可能性越大，也就越能够保证数据的恢复。如果ZXID相同，则SID越大机会越大。</p><h4 id="3-1-5-过半机制防止脑裂"><a href="#3-1-5-过半机制防止脑裂" class="headerlink" title="3.1.5 过半机制防止脑裂"></a>3.1.5 过半机制防止脑裂</h4><p><b>何为集群脑裂？</b></p><p>对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致“脑裂”的情况。</p><p>举例说明：比如现在有一个由 6 台服务器所组成的一个集群，部署在了 2 个机房，每个机房 3 台。正常情况下只有 1 个 leader，但是当两个机房中间网络断开的时候，每个机房的 3 台服务器都会认为另一个机房的 3 台服务器下线，而选出自己的 leader 并对外提供服务。若没有过半机制，当网络恢复的时候会发现有 2 个 leader。仿佛是 1 个大脑（leader）分散成了 2 个大脑，这就发生了脑裂现象。脑裂期间 2 个大脑都可能对外提供了服务，这将会带来数据一致性等问题。</p><p><b>过半机制是如何防止脑裂现象产生的？</b></p><p>ZooKeeper 的过半机制导致不可能产生 2 个 leader，因为少于等于一半是不可能产生 leader 的，这就使得不论机房的机器如何分配都不可能发生脑裂。</p><h3 id="3-2-Zookeeper集群搭建"><a href="#3-2-Zookeeper集群搭建" class="headerlink" title="3.2 Zookeeper集群搭建"></a>3.2 Zookeeper集群搭建</h3><h4 id="3-2-1搭建要求"><a href="#3-2-1搭建要求" class="headerlink" title="3.2.1搭建要求"></a>3.2.1搭建要求</h4><p>真实的集群是需要部署在不同的服务器上的，但是在我们测试时同时启动很多个虚拟机(ip)内存会吃不消，所以我们通常会搭建<strong>伪集群</strong>，也就是把所有的服务都搭建在一台虚拟机上，用端口(port)进行区分。</p><p>我们这里搭建一个三个节点的Zookeeper集群（伪集群）。</p><h4 id="3-2-2-准备工作"><a href="#3-2-2-准备工作" class="headerlink" title="3.2.2  准备工作"></a>3.2.2  准备工作</h4><p>重新部署一台虚拟机作为我们搭建集群的测试服务器。</p><p>（1）Zookeeper压缩包上传到服务器<br>（2）将Zookeeper解压 ，建立&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster目录，将解压后的Zookeeper复制到以下三个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /usr/local/zookeeper-cluster</span><br><span class="line">[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-1</span><br><span class="line">[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-2</span><br><span class="line">[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-3</span><br></pre></td></tr></table></figure><p>（4）创建data目录 ，并且将 conf下zoo_sample.cfg 文件改名为 zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/zookeeper-cluster/zookeeper-1/data</span><br><span class="line">mkdir /usr/local/zookeeper-cluster/zookeeper-2/data</span><br><span class="line">mkdir /usr/local/zookeeper-cluster/zookeeper-3/data</span><br><span class="line"></span><br><span class="line">mv  /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg</span><br><span class="line">mv  /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg</span><br><span class="line">mv  /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>（5） 配置每一个Zookeeper 的dataDir 和 clientPort 分别为2181  2182  2183</p><p>Zookeeper ①：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/usr/local/zookeeper-cluster/zookeeper-1/data</span><br></pre></td></tr></table></figure><p>Zookeeper ②：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">clientPort=2182</span><br><span class="line">dataDir=/usr/local/zookeeper-cluster/zookeeper-2/data</span><br></pre></td></tr></table></figure><p>Zookeeper ③：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">clientPort=2183</span><br><span class="line">dataDir=/usr/local/zookeeper-cluster/zookeeper-3/data</span><br></pre></td></tr></table></figure><h4 id="3-2-3-配置集群"><a href="#3-2-3-配置集群" class="headerlink" title="3.2.3 配置集群"></a>3.2.3 配置集群</h4><p>（1）在每个zookeeper的 data 目录下创建一个 myid 文件，内容分别是1、2、3 。这个文件就是记录每个服务器的ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;/usr/local/zookeeper-cluster/zookeeper-1/data/myid</span><br><span class="line">echo 2 &gt;/usr/local/zookeeper-cluster/zookeeper-2/data/myid</span><br><span class="line">echo 3 &gt;/usr/local/zookeeper-cluster/zookeeper-3/data/myid</span><br></pre></td></tr></table></figure><p>（2）在每一个zookeeper 的 zoo.cfg配置客户端访问端口（clientPort）和集群服务器IP列表。</p><p>集群服务器IP列表如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg</span><br><span class="line">vim /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg</span><br><span class="line">vim /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">每个配置文件都添加：</span><br><span class="line">server.1=192.168.149.135:2881:3881</span><br><span class="line">server.2=192.168.149.135:2882:3882</span><br><span class="line">server.3=192.168.149.135:2883:3883</span><br></pre></td></tr></table></figure><p>解释：server.服务器ID&#x3D;服务器IP地址：服务器之间通信端口：服务器之间投票选举端口 </p><h4 id="3-2-4-启动集群"><a href="#3-2-4-启动集群" class="headerlink" title="3.2.4 启动集群"></a>3.2.4 启动集群</h4><p>启动集群就是分别启动每个实例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start</span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start</span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h4 id="3-2-5-模拟集群异常情况"><a href="#3-2-5-模拟集群异常情况" class="headerlink" title="3.2.5 模拟集群异常情况"></a>3.2.5 模拟集群异常情况</h4><p>（1）首先我们先测试如果是从服务器挂掉，会怎么样。把3号服务器停掉，观察1号和2号，发现状态并没有变化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh stop</span><br><span class="line"></span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status</span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p>由此得出结论，3个节点的集群，从服务器挂掉，集群正常</p><p>（2）我们再把1号服务器（从服务器）也停掉，查看2号（主服务器）的状态，发现已经停止运行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh stop</span><br><span class="line"></span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p>由此得出结论，3个节点的集群，2个从服务器都挂掉，主服务器也无法运行。因为可运行的机器没有超过集群总数量的半数。</p><p>（3）我们再次把1号服务器启动起来，发现2号服务器又开始正常工作了。而且依然是领导者。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status </span><br></pre></td></tr></table></figure><p>（4）我们把3号服务器也启动起来，把2号服务器停掉,停掉后观察1号和3号的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start</span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh stop</span><br><span class="line"></span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status</span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status </span><br></pre></td></tr></table></figure><p>发现新的leader产生了。</p><p>由此我们得出结论，当集群中的主服务器挂了，集群中的其他服务器会自动进行选举状态，然后产生新得leader </p><p>（5）我们再次测试，当我们把2号服务器重新启动起来启动后，会发生什么？2号服务器会再次成为新的领导吗？我们看结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status</span><br><span class="line">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status </span><br></pre></td></tr></table></figure><p>我们会发现，2号服务器启动后依然是跟随者（从服务器），3号服务器依然是领导者（主服务器），没有撼动3号服务器的领导地位。</p><p>由此我们得出结论，当领导者产生后，再次有新服务器加入集群，不会影响到现任领导者。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h2><p><a href="https://www.cnblogs.com/leesf456/p/6107600.html">Zookeeper的Leader选举</a></p><p><a href="https://www.bilibili.com/video/BV1M741137qY?p=22&spm_id_from=pageDriver">黑马程序员快速入门zookeeper技术</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Zookeeper介绍&quot;&gt;&lt;a href=&quot;#1-Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;1.Zookeeper介绍&quot;&gt;&lt;/a&gt;1.Zookeeper介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Zookeeper是一个开源的分布式的，</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="notebook" scheme="http://example.com/tags/notebook/"/>
    
  </entry>
  
  <entry>
    <title>Jvm内存模型八股文</title>
    <link href="http://example.com/2022/03/08/Jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>http://example.com/2022/03/08/Jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2022-03-08T06:49:34.000Z</published>
    <updated>2022-05-31T09:13:15.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>文章为本人参考 <a href="https://javaguide.cn/java/jvm/memory-area.html#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F">JavaGuide</a>，方便查阅记忆整理出来的。</p><h2 id="JVM-运行时数据区域"><a href="#JVM-运行时数据区域" class="headerlink" title="JVM 运行时数据区域"></a>JVM 运行时数据区域</h2><ul><li>线程私有：程序计数器，虚拟机栈</li><li>线程共享：堆，方法区，</li></ul><p><strong>JDK 1.8 之前</strong> ：</p><p><img src="https://javaguide.cn/assets/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.5f095134.png" alt="img"></p><p><strong>JDK 1.8</strong> ：</p><p><img src="https://javaguide.cn/assets/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9FJDK1.8.dbbe1f77.png" alt="img"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>①：是线程私有的，随线程创建而创建，随线程消亡而消亡</p><p>②：作用：</p><ul><li>字节码解释器通过改变程序计数器来依次读取指令，实现了代码的流程控制</li><li>在多线程环境下，可以保存线程执行位置，待线程切换回来时继续执行</li></ul><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>①：是线程私有的，随线程创建而创建，随线程消亡而消亡</p><p>②：方法调用数据需要通过栈进行传递，每次调用方法都会有对应栈帧被压入栈中。</p><p>③：栈由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法返回地址。</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKbcyHniaRwicrGicpibemBIsib8lsEA62IBDdRchsYDHXOf5icUia1Du9bFicYa8Lx6f4IrPPNftTibDwX4vhQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 50%;" /><ul><li>局部变量表：主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference）</li><li>操作数栈：主要存储方法运行时产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。</li><li>动态链接：将符号引用转化为内存中的直接引用（Java源文件被编译成字节码文件时，所有变量和方法引用都会作为符号引用存放在Class文件中的常量池中，如果想调用这些方法，就需要再把符号引用转换回直接引用）</li></ul><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>①：跟虚拟机栈基本一致</p><p>②：虚拟机栈为 <code>Java </code> 方法服务，本地方法栈为 <code>native</code> 方法服务。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>①：内存共享</p><p>②：存放对象实例的地方</p><p>③：是垃圾管理器管理的主要区域，因此也被称作GC堆。Java堆可以细分为：新生代和老年代，再细致一点有：Eden、Survivor、Old 等空间。进一步划分的目的是更好的回收内存，或者更快的分配内存。</p><p> 在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分：</p><ol><li>新生代内存(Young Generation)</li><li>老生代(Old Generation)</li><li>永久代(Permanent Generation)</li></ol><p>而在JDK 8 版本后 PermGen(永久代) 已被 Metaspace(元空间) 取代，元空间使用的是直接内存 </p><p><img src="https://javaguide.cn/assets/hotspot-heap-structure.784465da.png" alt="hotspot-heap-structure"></p><p>大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 S0 或者 S1，并且对象的年龄还会加 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度，就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。当累积的某个年龄的对象的数目大小超过了 survivor 区的一半时，取这个年龄和 <code>MaxTenuringThreshold</code> 中更小的一个值，作为新的晋升年龄阈值。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>①：线程共享的内存区域，主要是用来存放已被虚拟机加载的「类相关信息」：包括类信息、常量池</p><p>②：当虚拟机要使用一个类时，会读取并解析 Class 文件的相关信息，然后将这些信息存到方法区中，方法区中会存储已被虚拟机加载的类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><p>③：方法区和永久代、元空间的关系：方法区相当于是个概念，而永久代和元空间是方法区的实现</p><p>④：把永久代换成元空间的因素：</p><ul><li>永久代存放在JVM中，受到JVM设置的固定大小上限。而元空间存放在直接内存中，溢出的可能性更小。</li><li>合并 HotSpot 和 JRockit 的代码时，JRockit 没有永久代这个东西。</li></ul><p>⑤：方法区常用参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=N <span class="comment">//设置 Metaspace 的初始（和最小大小）</span></span><br><span class="line">-XX:MaxMetaspaceSize=N <span class="comment">//设置 Metaspace 的最大大小</span></span><br></pre></td></tr></table></figure><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><p>Java中的常量池，实际上分为两种形态：静态常量池和运行时常量池。</p><h3 id="静态常量池"><a href="#静态常量池" class="headerlink" title="静态常量池"></a>静态常量池</h3><p>①：所谓静态常量池，即 <code>*.class</code> 文件中的常量池，字节码文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用字节码文件的绝大部分空间。它们只是一个类的描述信息而已，还没有具备被执行的能力</p><p>②：：Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量和符号引用的常量池表</p><p>②：常量池表会在加载后存放到方法区的运行时常量池中</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>①：运行时常量池，则是虚拟机在完成类装载操作后，将字节码文件中的常量池载入到内存并存入方法区的地方，我们常说的常量池，就是指方法区中的运行时常量池。</p><p>②：运行时常量池相对于静态常量池的另外一个重要特征就是具备动态性，Java语言并不要求常量一定只有在编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的 <code>intern()</code> 方法.</p><p>③：字符串常量池 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。JDK 8 后存放在堆中</p><img src="https://javaguide.cn/assets/method-area-jdk1.8.b19d81f7.png" alt="img" style="zoom: 80%;" /><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>①：直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 <code>OutOfMemoryError</code> 错误出现。</p><p>②：本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制</p><h2 id="异常解释"><a href="#异常解释" class="headerlink" title="异常解释"></a>异常解释</h2><p>①：<code>StackOverFlowError</code>： 若栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 <code>StackOverFlowError</code> 错误。</p><p>②：<code>OutOfMemoryError</code>：如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出<code>OutOfMemoryError</code> 错误。</p><h2 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h2><ol><li><p>检查类加载：检查是否能在常量池中定位到这个类的符号引用，并检查类是否已经被加载过、解析过、初始化过。若没有则先进行类的加载过程</p></li><li><p>分配内存： </p><p>①：两种方式</p><ul><li>指针碰撞<ul><li>适用场合 ：堆内存规整（即没有内存碎片）的情况下。</li><li>原理 ：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。</li><li>使用该分配方式的 GC 收集器：Serial, ParNew</li></ul></li><li>空闲列表<ul><li>适用场合 ： 堆内存不规整的情况下。</li><li>原理 ：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。</li><li>使用该分配方式的 GC 收集器：CMS</li></ul></li></ul><p>②：内存分配并发问题</p><ul><li>TLAB：为每个线程预先在Eden区分配一块内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大小大于 TLAB 的剩余内存或者 TLAB 已用尽时，采用CAS + 失败重试策略</li><li>CAS + 失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li></ul></li><li><p>初始化零值：将对象的实例字段初始化为这些字段对应类型的零值</p></li><li><p>设置对象头：对象头分为两部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|--------------------------------------------------------------|</span><br><span class="line">|                     Object Header (64 bits)                  |</span><br><span class="line">|------------------------------------|-------------------------|</span><br><span class="line">|        Mark Word (32 bits)         |    Klass Word (32 bits) |</span><br><span class="line">|------------------------------------|-------------------------|</span><br></pre></td></tr></table></figure><ul><li>Mark Word：主要保存 锁、Hash、还有分代年龄等信息</li><li>KClass Word：主要存放保存类元信息（存在于方法区）的指针</li></ul></li><li><p>执行 init 方法</p></li></ol><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><ol><li><p>使用句柄：在堆中开辟一块内存作为句柄池，存储对象实例数据和对象类型数据的指针</p><p><img src="https://javaguide.cn/assets/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-%E4%BD%BF%E7%94%A8%E5%8F%A5%E6%9F%84.1cf25227.png" alt="对象的访问定位-使用句柄"></p></li><li><p>直接指针：对象实例数据中包含有对象数据类型的指针</p></li></ol><p><img src="https://javaguide.cn/assets/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.9bfd6702.png" alt="对象的访问定位-直接指针"></p><p>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;文章为本人参考 &lt;a href=&quot;https://javaguide.cn/java/jvm/memory-area.htm</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Jvm" scheme="http://example.com/tags/Jvm/"/>
    
    <category term="八股文" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收机制</title>
    <link href="http://example.com/2022/03/08/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2022/03/08/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2022-03-08T03:20:54.000Z</published>
    <updated>2022-05-31T08:40:12.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>文章为本人参考<a href="https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5Mg==&mid=2247485557&idx=1&sn=f04951ebdf495cb16e4ead2b7725b310&scene=21#wechat_redirect">《对线面试官》垃圾回收机制</a>，方便查阅记忆整理出来的。</p><h2 id="堆内存的划分"><a href="#堆内存的划分" class="headerlink" title="堆内存的划分"></a>堆内存的划分</h2><p>堆分了「新生代」和「老年代」，「新生代」又分为「Eden」和「Survivor」区，「Survivor」区又分为「From Survivor」和「To Survivor」区</p><p><img src="C:\Users\18375\AppData\Roaming\Typora\typora-user-images\image-20220531145501981.png" alt="image-20220531145501981"></p><h2 id="判断对象已经死亡"><a href="#判断对象已经死亡" class="headerlink" title="判断对象已经死亡"></a>判断对象已经死亡</h2><p>只要对象不再被使用了，那我们就认为该对象就是垃圾，对象所占用的空间就可以被回收。判断对象是否已经死亡有两种方法</p><ol><li><p>「引用计数法」</p><ul><li>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。</li><li>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存</li><li>因为它最明显的缺点就是：如果对象存在循环依赖，那就无法定位该对象是否应该被回收（A依赖B，B依赖A）</li></ul></li><li><p>「可达性分析法」</p><ul><li><p>从「GC Roots」开始向下搜索，当对象到「GC Roots」都没有任何引用相连时，说明对象是不可用的，可以被回收</p></li><li><p>「GC Roots」是一组必须「活跃」的引用。从「GC Root」出发，程序通过直接引用或者间接引用，能够找到可能正在被使用的对象。可以作为「GC Roots」的对象：</p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈(Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁持有的对象</li></ul></li><li><p>JVM用的就是「可达性分析算法」来判断对象是否垃圾</p></li></ul></li></ol><h2 id="判断类是否已经无用"><a href="#判断类是否已经无用" class="headerlink" title="判断类是否已经无用"></a>判断类是否已经无用</h2><ol><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ol><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>垃圾回收的第一步就是「标记」，标记哪些没有被「GC Roots」引用的对象，标记完之后，我们就可以选择直接「清除」，只要不被「GC Roots」关联的，都可以清理掉，但也存在很明显的问题，直接清除会有「内存碎片」的问题：可能我有10M的空余内存，但程序申请9M内存空间却申请不下来（10M的内存空间是垃圾清除后的，不连续的）</p><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p>那解决「内存碎片」的问题也比较简单粗暴，「标记」完，不直接「清除」。我把「标记」存活的对象「复制」到另一块空间，复制完了之后，直接把原有的整块空间给干掉！这样就没有内存碎片的问题了</p><p>这种做法缺点又很明显：内存利用率低，得有一块新的区域给我复制过去</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>还有一种「折中」的办法，我未必要有一块「大的完整空间」才能解决内存碎片的问题，我只要能在「当前区域」内进行移动就行。</p><p>把存活的对象移到一边，把垃圾移到一边，那再将垃圾一起删除掉，不就没有内存碎片了嘛。</p><p>这种专业的术语就叫做「整理」</p><h2 id="区域分代"><a href="#区域分代" class="headerlink" title="区域分代"></a>区域分代</h2><p>①：「垃圾回收」会导致「STOP  THE  WORLD」</p><p>②：理解「STOP  THE  WORLD」：回收垃圾的时候，程序是需要有短暂的时间不能正常继续运作啊。不然JVM在回收的时候，用户线程还继续分配修改引用，JVM怎么搞？</p><p>③：为了使「STOP  THE  WORLD」持续的时间尽可能短以及提高并发式GC所能应付的内存分配速率，在很多的垃圾收集器上都会在「物理」或者「逻辑」上，把这两类对象进行区分，死得快的对象所占的区域叫做「年轻代」，活得久的对象所占的区域叫做「老年代」</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>①：「年轻代」的垃圾收集器有：Seria、Parallel Scavenge、ParNew</p><p>②：「老年代」的垃圾收集器有：Serial Old、Parallel Old、CMS、G1</p><p>③：参考 <a href="https://soulchay.com/2022/04/30/CMS&G1-%E5%85%AB%E8%82%A1%E6%96%87/">CMS&amp;G1八股文</a></p><p>④：新创建的对象一般是在「新生代」，那在什么时候会到「老年代」中呢？</p><ul><li>如果对象太大了，就会直接进入老年代（对象创建时就很大 | Survivor区没办法存下该对象）</li><li>如果对象太老了，那就会晋升至老年代（每发生一次Minor GC ，存活的对象年龄+1，达到默认值15 | 动态对象年龄判定 可以进入老年代）</li></ul><p>⑤：当Eden区空间不足时，就会触发Minor GC</p><p>⑥：Minor GC 相当于是「年轻代」的GC，那在「年轻代」GC的时候，从GC Roots出发，那不也会扫描到「老年代」的对象吗？那不就相当于全堆扫描吗？</p><p>HotSpot 虚拟机「老的GC」（G1以下）是要求整个GC堆在连续的地址空间上。所以会有一条分界线（一侧是老年代，另一侧是年轻代），所以可以通过「物理地址」就可以判断对象在哪个分代上。当 Minor GC的时候，从GC Roots出发，如果发现「老年代」的对象，那就不往下走了。</p><p>⑦：Minor GC时，如果「年轻代」的对象被「老年代」引用了，那么在标记存活对象的时候，就需要扫描老年代的对象，如果该对象拥有对新生代对象的引用，那么这个引用也会被作为 GC Roots。这相当于就做了 <b>全堆扫描</b>。这个时候JVM是怎么做到避免全堆扫描的？</p><p>HotSpot虚拟机下 有「card table」（卡表）来避免全局扫描「老年代」对象。「堆内存」的每一小块区域形成「卡页」，卡表实际上就是卡页的集合。当判断一个卡页中有存在对象的跨代引用时，将这个页标记为「脏页」。每次Minor GC 的时候只需要去「卡表」找到「脏页」，并将「脏页」中的老年代指向新生代的「引用」加入到 Minor GC的GC Roots里。当完成所有「脏页」的扫描之后，Java 虚拟机便会将所有「脏页」的标识位清零。这样虚拟机以空间换时间，避免了全表扫描。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;文章为本人参考&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5M</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Jvm" scheme="http://example.com/tags/Jvm/"/>
    
    <category term="八股文" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>代码到执行&amp;&amp;双亲委派</title>
    <link href="http://example.com/2022/03/07/%E4%BB%A3%E7%A0%81%E5%88%B0%E6%89%A7%E8%A1%8C&amp;&amp;%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE/"/>
    <id>http://example.com/2022/03/07/%E4%BB%A3%E7%A0%81%E5%88%B0%E6%89%A7%E8%A1%8C&amp;&amp;%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE/</id>
    <published>2022-03-06T20:29:34.000Z</published>
    <updated>2022-05-31T11:54:16.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>文章为本人参考<a href="https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5Mg==&mid=2247485469&idx=1&sn=cf732a462ea5fce2ce74d548add591ab&scene=21#wechat_redirect">《对线面试官》Java编译到执行的过程</a>，方便查阅记忆整理出来的。</p><h2 id="如何理解-Java-跨平台"><a href="#如何理解-Java-跨平台" class="headerlink" title="如何理解 Java 跨平台"></a>如何理解 Java 跨平台</h2><p>①：运行代码时，Java源代码会被编译为 class文件，class文件 是运行在JVM之上的。</p><p>③：JVM是面向操作系统的，它负责把Class字节码解释成系统所能识别的指令并执行，同时也负责程序运行时内存的管理。所以 Java是一门「跨平台」的语言，是可以「一次编译，到处运行」的。</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKbOame2icwJQQ3T4kzKicxu9SgWuxw9klljCBOnqac2dWDicY28xmNWVPRWtXMiaI4iaRkxyjIwUGnhSzA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 50%;" /><h2 id="从源码文件到代码执行的过程"><a href="#从源码文件到代码执行的过程" class="headerlink" title="从源码文件到代码执行的过程"></a>从源码文件到代码执行的过程</h2><p>从Java 源代码到执行分为四个过程：编译、加载、解释、执行</p><ol><li>编译：将源码文件编译成JVM可以解释的class文件。编译过程会对源代码程序做 「语法分析」「语义分析」「注解处理」等等处理，最后才生成字节码文件。比如对泛型的擦除和我们经常用的Lombok就是在编译阶段干的。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKbOame2icwJQQ3T4kzKicxu9SpW2xVhxg2LgpxP11wXYbiapstK1TEdXCibBW20icWGGic2jk6x9b6iamZag/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><ol start="2"><li><p>加载：将编译后的class文件加载到JVM中。在加载阶段又可以细化几个步骤：装载、连接、初始化</p><ul><li><p>装载</p><ul><li>【装载时机】为了节省内存的开销，并不会一次性把所有的类都装载至JVM，而是等到「有需要」的时候才进行装载（比如new和反射等等）</li><li>【装载发生】class文件是通过「类加载器」装载到jvm中的，为了防止内存中出现多份同样的字节码，使用了双亲委派机制（它不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上）</li><li>【装载规则】JDK 中的本地方法类一般由根加载器（Bootstrp loader）装载，JDK 中内部实现的扩展类一般由扩展加载器（ExtClassLoader ）实现装载，而程序中的类文件则由系统加载器（AppClassLoader ）实现装载。</li><li>装载这个阶段它做的事情可以总结为：查找并加载类的二进制数据，在JVM「堆」中创建一个java.lang.Class类的对象，并将类相关的信息存储在JVM「方法区」中</li><li>通过「装载」这个步骤后，现在已经把class文件装载到JVM中了，并创建出对应的Class对象以及类信息存储至方法区了。</li></ul></li><li><p>连接：对class的信息进行验证、为「类变量」分配内存空间并对其赋默认值。</p><ul><li>验证：验证类是否符合 Java 规范和 JVM 规范</li><li>准备：为类的静态变量分配内存，初始化为系统的初始值</li><li>解析：将符号引用转为直接引用的过程</li><li>通过「连接」这个步骤后，现在已经对class信息做校验并分配了内存空间和默认值</li></ul></li><li><p>初始化：为类的静态变量赋予正确的初始值。过程大概就是收集class的静态变量、静态代码块、静态方法至()方法，随后从上往下开始执行。如果「实例化对象」则会调用方法对实例变量进行初始化，并执行对应的构造方法内的代码。初始化完成之后，当我们尝试执行一个类的方法时，会找到对应方法的字节码的信息，然后解释器会把字节码信息解释成系统能识别的指令码。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKbOame2icwJQQ3T4kzKicxu9SBmevOSicQwP5JPH5K7RYdibxiaib4HiajfKKVyGc0J5hJSCWSOYEiaruicibnQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p></li></ul></li><li><p>解释：把字节码转换为操作系统识别的指令</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKbOame2icwJQQ3T4kzKicxu9SK1jbxou3bCCxRQ1ZDNuVwibyv1Z9ndsdicJKEfI2Eo7ZYjYVxPRmqEyw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:67%;" /><ul><li>在解释阶段会有两种方式把字节码信息解释成机器指令码，一个是字节码解释器、一个是即时编译器(JIT)。</li><li>JVM会对「热点代码」做编译，非热点代码直接进行解释。当JVM发现某个方法或代码块的运行特别频繁的时候，就有可能把这部分代码认定为「热点代码」</li><li>使用「热点探测」来检测是否为热点代码。「热点探测」一般有两种方式，计数器和抽样。HotSpot使用的是「计数器」的方式进行探测，为每个方法准备了两类计数器：方法调用计数器和回边计数器</li><li>这两个计数器都有一个确定的阈值，当计数器超过阈值溢出了，就会触发JIT编译。即时编译器把热点方法的指令码保存起来，下次执行的时候就无需重复的进行解释，直接执行缓存的机器语言</li></ul></li><li><p>执行：操作系统把解释器解析出来的指令码，调用系统的硬件执行最终的程序指令。</p></li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKbOame2icwJQQ3T4kzKicxu9SdB2NN0BqiaWMKnVeITd5EIrFYrdzeBYWicv6GePLZaGtPVNwPCCZQQ7g/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h2><p>class文件是通过「类加载器」装载至JVM中的。为了防止内存中存在多份同样的字节码，使用了双亲委派机制（它不会自己去尝试加载类，而是把请求委托给父加载器去完成，依次向上）</p><p>JDK 中的本地方法类一般由根加载器（Bootstrp loader）装载，JDK 中内部实现的扩展类一般由扩展加载器（ExtClassLoader ）实现装载，而程序中的类文件则由系统加载器（AppClassLoader）实现装载。</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKYexQU7CgibSMw73fSprowKUmaW11tqgereKoayUuRvweArpdRypXYtf6loflDBqCLq7VialCY3zr5Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 50%;" /><h3 id="如何理解打破双亲委派机制"><a href="#如何理解打破双亲委派机制" class="headerlink" title="如何理解打破双亲委派机制"></a>如何理解打破双亲委派机制</h3><p>①：很好理解啊，意思就是：只要加载类的时候，不是按照 <code>APPClassLoader-&gt;Ext ClassLoader-&gt;BootStrap ClassLoader</code> 这个顺序找，那就算是打破了双亲委派机制。</p><p>②：因为加载class核心的方法在LoaderClass类的 <code>loadClass() </code>方法上（双亲委派机制的核心实现）。那只要我自定义个ClassLoader，重写loadClass方法（不依照往上开始寻找类加载器），那就算是打破双亲委派机制了。</p><h3 id="破坏双亲委派机制场景"><a href="#破坏双亲委派机制场景" class="headerlink" title="破坏双亲委派机制场景"></a>破坏双亲委派机制场景</h3><h4 id="1-Tomcat"><a href="#1-Tomcat" class="headerlink" title="1.Tomcat"></a>1.Tomcat</h4><p>①：在初学时部署项目，我们是把 war 包放到 Tomcat 的 webapp下，这意味着一个 tomcat 可以运行多个 Web应用程序。那假设我现在有两个Web应用程序，它们都有一个类，叫做User，并且它们的类全限定名都一样，比如都是com.soul.User。但是他们的具体实现是不一样的。那么Tomcat是如何保证它们是不会冲突的呢？Tomcat 给每个 Web 应用创建一个类加载器实例<b>（WebAppClassLoader）</b>&gt;，该加载器重写了 <code>loadClass()</code> 方法，优先加载当前应用目录下的类，如果当前找不到了，才一层一层往上找，这样就做到了Web应用层级的隔离</p><p>②：Tomcat 其他类加载器</p><ol><li><p>首先并不是Web应用程序下的所有依赖都需要隔离的，比如Redis就可以Web应用程序之间共享（如果有需要的话），因为如果版本相同，没必要每个Web应用程序都独自加载一份。做法也很简单，Tomcat就在 <code>WebAppClassLoader</code> 上加了个 父类加载器<b>（SharedClassLoader）</b>，如果 <code>WebAppClassLoader</code> 自身没有加载到某个类，那就委托 <code>SharedClassLoader</code> 去加载。（无非就是把需要应用程序之间需要共享的类放到一个共享目录下嘛）</p></li><li><p>为了隔绝Web应用程序与Tomcat本身的类，又有类加载器 <b>(CatalinaClassLoader) </b>来装载Tomcat本身的依赖</p></li><li><p>如果Tomcat本身的依赖和Web应用还需要共享，那么还有类加载器 <b>(CommonClassLoader) </b>来装载进而达到共享</p></li></ol><p>各个类加载器的加载目录可以到 Tomcat 的 <code>catalina.properties</code> 配置文件上查看</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKYexQU7CgibSMw73fSprowKUmPt3awtOIESGe0zYKThJx7hia0qUGqMClVOXahMNepiczaHYT7iaTwWhw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 80%;" /><h4 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h4><p>①：JDBC定义了接口，具体实现类由各个厂商进行实现嘛(比如MySQL)</p><p>②：类加载有个规则：如果一个类由类加载器A加载，那么这个类的依赖类也是由「相同的类加载器」加载。</p><p>③：我们用JDBC的时候，是使用 <code>DriverManager</code> 进而获取连接，<code>DriverManager</code> 在 <code>java.sql</code> 包下，显然是由 <code>BootStrap</code> 类加载器进行装载。所以当我们使用<code>DriverManager.getConnection()</code>时，得到的一定是厂商实现的类。但是 <code>BootStrap ClassLoader</code> 加载不到各个厂商实现的类，因为这些实现类并不在java包中。</p><p>④：解决方案就是，在 <code>DriverManager</code> 初始化的时候，得到「线程上下文加载器」</p><p>⑤：这样去获取 <code>Connection</code> 的时候，是使用「线程上下文加载器」去加载的，而这里的线程上下文加载器实际上是<code>App ClassLoader</code>。所以在获取连接的时候，还是先找 <code>Ext ClassLoader</code> 和 <code>BootStrap ClassLoader</code> ，只不过这俩加载器肯定是加载不到的，最终会由 <code>App ClassLoader</code> 进行加载</p><p>⑥：那这种情况，有的人觉得破坏了双亲委派机制，因为本来明明应该是由<code>BootStrap ClassLoader</code>进行加载的，结果你来了一手「线程上下文加载器」，改掉了「类加载器」。有的人觉得没破坏双亲委派机制，只是改成由「线程上下文加载器」进行类加载，但还是遵守着：「依次往上找父类加载器进行加载，都找不到时才由自身加载」。认为”原则”上是没变的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;文章为本人参考&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5M</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Jvm" scheme="http://example.com/tags/Jvm/"/>
    
    <category term="八股文" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>四种引用</title>
    <link href="http://example.com/2022/02/28/%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8/"/>
    <id>http://example.com/2022/02/28/%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8/</id>
    <published>2022-02-28T08:04:20.000Z</published>
    <updated>2022-05-31T00:23:58.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用（Reference类）"><a href="#引用（Reference类）" class="headerlink" title="引用（Reference类）"></a>引用（Reference类）</h2><ul><li>先在这里说一下，软引用（SoftReference）、弱引用（WeakReference）、幻象引用（PhantomReference）都是java.lang.ref.Reference的子类，这个Reference类主要有4个方法<ul><li>void clean(); 清除此参考对象。（此方法仅由Java代码调用; 当垃圾收集器清除引用时，它直接执行，而不调用此方法。）</li><li>boolean enqueue(); 将此引用对象添加到其注册的队列（如果有）。</li><li>T get(); 返回此引用对象的指示。(通过这个方法可以返回Reference所引用的对象，可以重新变成强引用) 例如：软引用引用的一个对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyObject</span> <span class="variable">aRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">SoftReference aSoftRef=<span class="keyword">new</span> <span class="title class_">SoftReference</span>(aRef);</span><br><span class="line">aRef = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//现在只有一个软引用指向MyObject的这个对象，</span></span><br><span class="line"><span class="comment">//如果这个对象还没有被回收，可以把他再次变为强引用</span></span><br><span class="line"><span class="keyword">if</span>(aSoftRef.get() != <span class="literal">null</span>)</span><br><span class="line">  <span class="type">MyObject</span> <span class="variable">bRef</span> <span class="operator">=</span> aSoftRef.get();</span><br><span class="line"><span class="comment">//这个时候MyObject这个对象又变成强引用</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>boolean isEnqueued();通过程序或垃圾收集器来告知这个引用对象是否已经入队;</li><li>其中enqueue 和 isEnqueued 这两个方法涉及到引用队列。</li></ul><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><ul><li>强引用：形如 <code>Object object = new Object()</code> ；这样就是典型的强引用，被强引用引用的对象不会被垃圾收集器主动回收，JVM宁愿抛出 <code>OutOfMemoryError</code> 运行时错误（OOM），使程序异常终止，也不会靠随意回收具有强引用的“存活”对象来解决内存不足的问题。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应强引用赋值为 null，这个被引用的对象就是可以被垃圾回收器回收的(具体回收时机还是要看垃圾收集策略)。</li></ul><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><ul><li><p>软引用通过 <code>SoftReference</code> 类实现。软引用的生命周期比强引用短一些。只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象：即JVM 会确保在抛出 <code>OutOfMemoryError</code> 之前，清理软引用指向的对象。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用（注意是引用本身这个对象加入到与之关联的引用队列中。后续，我们可以调用ReferenceQueue的 <code>poll()</code> 方法来检查是否有它所关心的对象被回收（因为在这个队列里面的引用所指向的对象都被回收了）。如果队列为空，将返回一个null，否则该方法返回队列中前面的一个Reference对象。</p></li><li><p>应用场景：软引用通常用来实现内存敏感的缓存。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p></li></ul><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><ul><li><p>弱引用通过 <code>WeakReference</code> 类实现。 弱引用的生命周期比软引用短。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。由于垃圾回收器是一个优先级很低的线程，因此不一定会很快回收弱引用的对象。弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中（和引用队列一起使用同上面的软引用）。</p></li><li><p>应用场景：弱应用同样可用于内存敏感的缓存。</p></li></ul><h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><ul><li><p>虚引用也叫幻象引用，通过 <code>PhantomReference</code> 类来实现。无法通过虚引用访问对象的任何属性或函数。虚引用仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用<b>必须</b>和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前或者已经回收之后，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取一些程序行动（和引用队列一起使用同上面软引用跟弱引用）。</p></li><li><p>应用场景：可用来跟踪对象被垃圾回收器回收的活动，当一个虚引用关联的对象被垃圾收集器回收之前会收到一条系统通知</p></li></ul><h2 id="引用队列（ReferenceQueue）"><a href="#引用队列（ReferenceQueue）" class="headerlink" title="引用队列（ReferenceQueue）"></a>引用队列（ReferenceQueue）</h2><ul><li><code>Reference</code> 对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。在java.lang.ref包里还提供了 <code>ReferenceQueue</code>。</li><li>前面说到在使用软引用、虚引用、幻象引用的时候可以指定一个引用队列，在引用所引用的对象被回收后引用本身就会进入引用队列。<ul><li>使用例子如下</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReferenceQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>();</span><br><span class="line"><span class="type">SoftReference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SoftReference</span>(aMyObject,queue);</span><br></pre></td></tr></table></figure><ul><li>通过引用队列可以看到哪些Reference对象所引用的对象已经被回收，当调用引用队列的 <code>poll()</code> 方法就可以返回除队列中的失去所引用对象的Reference对象</li><li>利用这个方法，我们可以检查哪个SoftReference所软引用的对象已经被回收。于是我们可以把这些失去所软引用的对象的SoftReference对象清除掉。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SoftReference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((ref = (EmployeeRef) q.poll()) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 清除ref</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="摘自"><a href="#摘自" class="headerlink" title="摘自"></a>摘自</h2><p><a href="https://juejin.cn/post/6844903728500178952">java的强引用、软引用、弱引用、幻象引用，引用队列总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用（Reference类）&quot;&gt;&lt;a href=&quot;#引用（Reference类）&quot; class=&quot;headerlink&quot; title=&quot;引用（Reference类）&quot;&gt;&lt;/a&gt;引用（Reference类）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;先在这里说一下，软引用（Soft</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Jvm" scheme="http://example.com/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>Jvm 调优八股文</title>
    <link href="http://example.com/2022/02/11/Jvm-%E8%B0%83%E4%BC%98%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>http://example.com/2022/02/11/Jvm-%E8%B0%83%E4%BC%98%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2022-02-11T11:23:34.000Z</published>
    <updated>2022-05-31T08:54:45.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>文章为本人参考<a href="https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5Mg==&mid=2247485647&idx=1&sn=65c82c1e3bf4bd9bf926d14dfd3e06fb&scene=21#wechat_redirect">《对线面试官》JVM调优</a>，方便查阅记忆整理出来的。</p><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><p>JVM调优指标：『吞吐量』、『停顿时间』和『垃圾回收频率』。基于这些指标，就有可能需要调整：</p><ol><li><p>内存区域大小以及相关策略（比如整块堆内存占多少、新生代占多少、老年代占多少、Survivor占多少、晋升老年代的条件等等），比如（<code>-Xmx</code>：设置堆的最大值、<code>-Xms</code>：设置堆的初始值、<code>-Xmn</code>：表示年轻代的大小、-XX:SurvivorRatio：伊甸区和幸存区的比例等等），按经验来说：IO密集型的可以稍微把「年轻代」空间加大些，因为大多数对象都是在年轻代就会灭亡。内存计算密集型的可以稍微把「老年代」空间加大些，对象存活时间会更长些）</p></li><li><p>垃圾回收器（选择合适的垃圾回收器，以及各个垃圾回收器的各种调优参数），比如（<code>-XX:+UseG1GC</code>：指定 JVM 使用的垃圾回收器为 G1、<code>-XX:MaxGCPauseMillis</code>：设置目标停顿时间、<code>-XX:InitiatingHeapOccupancyPercent</code>：当整个堆内存使用达到一定比例，全局并发标记阶段 就会被启动等等），这些都是因地制宜，具体问题具体分析。在大多数场景下，JVM 已经能够达到「开箱即用」</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKYzo9uu6cXtN7SVaZKBS66YCS9zG7gicGZYwhkyDl2BCjpibSibMiahh6ibOIn5iclCibNDwfIL3c6alLibVA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 67%;" /></li></ol><h2 id="JVM-调优工具"><a href="#JVM-调优工具" class="headerlink" title="JVM 调优工具"></a>JVM 调优工具</h2><ol><li><p>通过 <code>jps</code> 命令查看Java进程「基础」信息（进程号、主类）。这个命令很常用的就是用来看当前服务器有多少Java进程在运行，它们的进程号和加载主类是啥</p></li><li><p>通过 <code>jstat</code> 命令查看Java进程「统计类」相关的信息（类加载、编译相关信息统计，各个内存区域GC概况和统计）。这个命令很常用于看GC的情况</p></li><li><p>通过 <code>jinfo</code> 命令来查看和调整Java进程的「运行参数」。</p></li><li><p>通过 <code>jmap</code> 命令来查看Java进程的「内存信息」。这个命令很常用于把JVM内存信息dump到文件，然后再用MAT( Memory Analyzer tool 内存解析工具)把文件进行分析</p></li><li><p>通过 <code>jstack</code> 命令来查看JVM「线程信息」。这个命令用常用语排查死锁相关的问题</p></li><li><p>还有近期比较热门的 Arthas（阿里开源的诊断工具），涵盖了上面很多命令的功能且自带图形化界面。这也是我这边常用的排查和分析工具</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKYzo9uu6cXtN7SVaZKBS66YzxPCkwNP5tPPl4stotywsZ2f8GiaSrRxn0vejopVzPVE5nibO7hy2b3w/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" /></li></ol><h2 id="JIT优化技术"><a href="#JIT优化技术" class="headerlink" title="JIT优化技术"></a>JIT优化技术</h2><p>JIT优化技术比较出名的有两种：方法内联和逃逸分析</p><ol><li><p>方法内联</p><ol><li>所谓方法内联就是把「目标方法」的代码复制到「调用的方法」中，避免发生真实的方法调用</li><li>因为每次方法调用都会生成栈帧（压栈出栈记录方法调用位置等等）会带来一定的性能损耗，所以「方法内联」的优化可以提高一定的性能</li><li>在JVM中也有相关的参数给予我们指定（-XX:MaxFreqInlineSize、-XX:MaxInlineSize）</li></ol></li><li><p>逃逸分析</p><p>「逃逸分析」则是判断一个对象是否被外部方法引用或外部线程访问的分析技术，如果「没有被引用」，就可以对其进行优化，比如说：</p><ol><li>锁消除（同步忽略）：该对象只在方法内部被访问，不会被别的地方引用，那么就一定是线程安全的，可以把锁相关的代码给忽略掉</li><li>栈上分配：该对象只会在方法内部被访问，直接将对象分配在「栈」中（Java默认是将对象分配在「堆」中，是需要通过JVM垃圾回收期进行回收，需要损耗一定的性能，而栈内分配则快很多）</li><li>标量替换&#x2F;分离对象：当程序真正执行的时候可以不创建这个对象，而直接创建它的成员变量来代替。将对象拆分后，可以分配对象的成员变量在栈或寄存器上，原本的对象就无需分配内存空间了</li></ol></li></ol><img src="https://mmbiz.qpic.cn/mmbiz_jpg/E44aHibktsKYzo9uu6cXtN7SVaZKBS66Yjv2NNf5hTde0tvxFxEYAdZLjxZevOHicm5aCDzZhQK3E8Xsm6seGszQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;文章为本人参考&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU4NzA3MTc5M</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Jvm" scheme="http://example.com/tags/Jvm/"/>
    
    <category term="八股文" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>动态规划入门题</title>
    <link href="http://example.com/2022/01/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8%E9%A2%98/"/>
    <id>http://example.com/2022/01/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8%E9%A2%98/</id>
    <published>2022-01-24T16:00:00.000Z</published>
    <updated>2022-05-30T06:05:53.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><p>本篇文章题目均来自力扣，部分图片与题解来自代码随想录。</p><h2 id="QUESTION-amp-ANSWER"><a href="#QUESTION-amp-ANSWER" class="headerlink" title="QUESTION &amp; ANSWER"></a>QUESTION &amp; ANSWER</h2><h3 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509.斐波那契数"></a>509.斐波那契数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</span><br><span class="line">F(0) = 0，F(1) = 1</span><br><span class="line">F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</span><br><span class="line">给定 n ，请计算 F(n) 。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br><span class="line">解释：F(2) = F(1) + F(0) = 1 + 0 = 1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> a;</span><br><span class="line">            b = a + b;</span><br><span class="line">            a = b - tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span><br><span class="line">每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746.使用最小花费爬楼梯"></a>746.使用最小花费爬楼梯</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</span><br><span class="line">你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</span><br><span class="line">请你计算并返回达到楼梯顶部的最低花费。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：cost = [10,15,20]</span><br><span class="line">输出：15</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cost.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62.不同路径"></a>62.不同路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</span><br><span class="line">机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</span><br><span class="line">问总共有多少条不同的路径？</span><br></pre></td></tr></table></figure><p><b>示例1</b>：</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/algorithm/algorithm2.png"></img></p><p><b>输入：m &#x3D; 3, n &#x3D; 7 </b></p><p><b>输出：28</b></p><p>①：定义dp数组长度为m,n：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++) dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②：定义dp数组长度为m+1,n+1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++) dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63.不同路径 II"></a>63.不同路径 II</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</span><br><span class="line">机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</span><br><span class="line">现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</span><br><span class="line">网格中的障碍物和空位置分别用 1 和 0 来表示。</span><br></pre></td></tr></table></figure><p><b>示例1</b>：</p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/algorithm/algorithm5.png"></img></p><p><b>输入：m &#x3D; 3, n &#x3D; 7 </b></p><p><b>输出：28</b></p><p>①：定义dp数组长度为m,n：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        <span class="type">int</span> dp[][] = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">1</span>; a&lt;m; a++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> b=<span class="number">1</span>;b&lt;n;b++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[a][b] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[a][b] = dp[a-<span class="number">1</span>][b] + dp[a][b-<span class="number">1</span>];    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②：定义dp数组长度为m+1,n+1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obstacleGrid[i-<span class="number">1</span>][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][i-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;=m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343.整数拆分"></a>343.整数拆分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k &gt;= 2 ），并使这些整数的乘积最大化。</span><br><span class="line">返回 你可以获得的最大乘积 。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: n = 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 = 1 + 1, 1 × 1 = 1。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[i]为正整数i拆分结果的最大乘积</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>]; </span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                <span class="comment">//j*(i-j)代表把i拆分为j和i-j两个数相乘</span></span><br><span class="line">                <span class="comment">//j*dp[i-j]代表把i拆分成j和继续把(i-j)这个数拆分，取(i-j)拆分结果中的最大乘积与j相乘</span></span><br><span class="line">                dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96.不同的二叉搜索树"></a>96.不同的二叉搜索树</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。</span><br></pre></td></tr></table></figure><p><b>示例 1：</b></p><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/algorithm/algorithm4.png"></img></p><p><b>输入：n &#x3D; 3 </b></p><p><b>输出：5</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">来看看n=3时，有哪几种情况。</span><br><span class="line">当1为头结点的时候，其右子树有两个节点，这两个节点的布局与 n 为2的时候两棵树的布局是一样的。</span><br><span class="line">当3为头结点的时候，其左子树有两个节点，这两个节点的布局与 n 为2的时候两棵树的布局是一样的。</span><br><span class="line">当2为头结点的时候，其左右子树都只有一个节点，布局和 n 为1的时候只有一棵树的布局也是一样的。</span><br><span class="line"></span><br><span class="line">思考到这里，这道题目就有眉目了。</span><br><span class="line">dp[3]就是: 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量。</span><br><span class="line">元素1为头结点搜索树的数量 = 右子树有2个元素的搜索树数量 * 左子树有0个元素的搜索树数量。</span><br><span class="line">元素2为头结点搜索树的数量 = 右子树有1个元素的搜索树数量 * 左子树有1个元素的搜索树数量。</span><br><span class="line">元素3为头结点搜索树的数量 = 右子树有0个元素的搜索树数量 * 左子树有2个元素的搜索树数量。</span><br><span class="line"></span><br><span class="line">有2个元素的搜索树数量就是dp[2]。</span><br><span class="line">有1个元素的搜索树数量就是dp[1]。</span><br><span class="line">有0个元素的搜索树数量就是dp[0]。</span><br><span class="line">所以dp[3] = dp[2] * dp[0] + dp[1] * dp[1] + dp[0] * dp[2]</span><br></pre></td></tr></table></figure><p><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos/algorithm/algorithm6.png"></img></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;dp.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i] += dp[j - <span class="number">1</span>] * dp[i - j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PREFACE&quot;&gt;&lt;a href=&quot;#PREFACE&quot; class=&quot;headerlink&quot; title=&quot;PREFACE&quot;&gt;&lt;/a&gt;PREFACE&lt;/h2&gt;&lt;p&gt;本篇文章题目均来自力扣，部分图片与题解来自代码随想录。&lt;/p&gt;
&lt;h2 id=&quot;QUESTION-a</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>双指针算法题型</title>
    <link href="http://example.com/2021/11/28/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/11/28/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</id>
    <published>2021-11-28T02:34:00.000Z</published>
    <updated>2022-05-30T13:37:33.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><p>本篇文章题目均来自力扣，部分图片与题解来自代码随想录。</p><h2 id="QUESTION-amp-ANSWER"><a href="#QUESTION-amp-ANSWER" class="headerlink" title="QUESTION &amp; ANSWER"></a>QUESTION &amp; ANSWER</h2><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">27. 移除元素</span><br><span class="line">给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</span><br><span class="line">不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</span><br><span class="line"></span><br><span class="line">元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos\algorithm\algorithm7.gif"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != val)&#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给你一个升序排列数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。</span><br><span class="line">不要使用额外的数组空间，你必须在原地修改输入数组 并在使用 O(1) 额外空间的条件下完成。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[slow] != nums[fast])&#123;</span><br><span class="line">                slow++;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路一: 非0数覆盖 0 ，需要处理slow后面的元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fastIndex &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fastIndex] != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[slowIndex++] = nums[fastIndex++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fastIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后面的元素全部置为0</span></span><br><span class="line">        <span class="keyword">while</span>(slowIndex &lt; nums.length)&#123;</span><br><span class="line">            nums[slowIndex++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路二: 交换 0 和 非0数的位置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(slow &lt; nums.length &amp;&amp; nums[slow]!=<span class="number">0</span>)  slow++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> slow;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(fast &lt; nums.length)&#123;    </span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=<span class="number">0</span>)&#123;</span><br><span class="line">                change(fast,slow,nums);</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> fastIndex,<span class="type">int</span> slowIndex,<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[fastIndex];</span><br><span class="line">        nums[fastIndex] = nums[slowIndex];</span><br><span class="line">        nums[slowIndex] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a>844. 比较含退格的字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。# 代表退格字符。</span><br><span class="line">如果相等，返回 true ；否则，返回 false 。</span><br><span class="line">注意：如果对空文本输入退格字符，文本继续为空。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：S 和 T 都会变成 “ac”。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 “”。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> handle(s.toCharArray()).equals(handle(t.toCharArray()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">handle</span><span class="params">(<span class="type">char</span>[] strArr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; strArr.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strArr[right] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                strArr[left] = strArr[right];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left &gt; <span class="number">0</span>)&#123;<span class="comment">//这一步很关键</span></span><br><span class="line">                left--;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;left; i++)&#123;</span><br><span class="line">           res += strArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><img src="http://fastly.jsdelivr.net/gh/SoulChay/figureBed/blogPhotos\algorithm\algorithm8.gif"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> nums.length -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftMulti</span> <span class="operator">=</span> nums[left] * nums[left];</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightMulti</span> <span class="operator">=</span> nums[right] * nums[right];</span><br><span class="line">            <span class="keyword">if</span>(leftMulti &gt; rightMulti)&#123;</span><br><span class="line">                res[index--] = leftMulti;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[index--] = rightMulti;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PREFACE&quot;&gt;&lt;a href=&quot;#PREFACE&quot; class=&quot;headerlink&quot; title=&quot;PREFACE&quot;&gt;&lt;/a&gt;PREFACE&lt;/h2&gt;&lt;p&gt;本篇文章题目均来自力扣，部分图片与题解来自代码随想录。&lt;/p&gt;
&lt;h2 id=&quot;QUESTION-a</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>二分算法题型</title>
    <link href="http://example.com/2021/11/26/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://example.com/2021/11/26/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2021-11-26T07:25:00.000Z</published>
    <updated>2022-05-30T12:01:00.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PREFACE"><a href="#PREFACE" class="headerlink" title="PREFACE"></a>PREFACE</h2><p>本篇文章题目均来自力扣，部分图片与题解来自代码随想录。</p><h2 id="QUESTION-amp-ANSWER"><a href="#QUESTION-amp-ANSWER" class="headerlink" title="QUESTION &amp; ANSWER"></a>QUESTION &amp; ANSWER</h2><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><p>这道题主要是注意 <code>num.length == 1</code> 的情况，即 <code>left</code> 可不可以小于 <code>right</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">35. 搜索插入位置</span><br><span class="line">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class="line">请必须使用时间复杂度为 O(log n) 的算法。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)  left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)  right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//或者是 return right + 1;</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">34. 在排序数组中查找元素的第一个和最后一个位置</span><br><span class="line">给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</span><br><span class="line">如果数组中不存在目标值 target，返回 [-1, -1]。</span><br><span class="line"></span><br><span class="line">进阶：</span><br><span class="line">你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</span><br><span class="line"> </span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target)  left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)  right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pos = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果没有匹配上则返回&#123;-1,-1&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(nums[pos] != target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//匹配成功</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> pos;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> pos;</span><br><span class="line">        <span class="keyword">while</span>(end+<span class="number">1</span> &lt; nums.length &amp;&amp; nums[end+<span class="number">1</span>] == target) end++;</span><br><span class="line">        <span class="keyword">while</span>(begin -<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; nums[begin-<span class="number">1</span>] == target) begin--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;begin,end&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a>69. Sqrt(x)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给你一个非负整数 x ，计算并返回 x 的 算术平方根。</span><br><span class="line">由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</span><br><span class="line">注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：x = 4</span><br><span class="line">输出：2</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：x = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> x;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (mid &gt; x/mid)  right=mid-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mid &lt; x/mid)  left=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a>367. 有效的完全平方数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">367. 有效的完全平方数</span><br><span class="line">给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</span><br><span class="line">进阶：不要 使用任何内置的库函数，如  sqrt 。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：num = 16</span><br><span class="line">输出：true</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：num = 14</span><br><span class="line">输出：false</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">1 &lt;= num &lt;= 2^31 - 1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">right</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(num &lt; mid*mid) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; mid*mid) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PREFACE&quot;&gt;&lt;a href=&quot;#PREFACE&quot; class=&quot;headerlink&quot; title=&quot;PREFACE&quot;&gt;&lt;/a&gt;PREFACE&lt;/h2&gt;&lt;p&gt;本篇文章题目均来自力扣，部分图片与题解来自代码随想录。&lt;/p&gt;
&lt;h2 id=&quot;QUESTION-a</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="Algorithm" scheme="http://example.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>向上转型问题</title>
    <link href="http://example.com/2021/07/09/%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/07/09/%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E9%97%AE%E9%A2%98/</id>
    <published>2021-07-09T07:08:00.000Z</published>
    <updated>2022-05-14T01:08:30.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h2><p>先来看一个代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Int2LongOverflow</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Integer.MAX_VALUE = 2147483647</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum1</span> <span class="operator">=</span> a + b1;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum2</span> <span class="operator">=</span> <span class="number">2147483647</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum3</span> <span class="operator">=</span> a + b2;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum4</span> <span class="operator">=</span> <span class="number">2147483647</span> + <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;sum1 = &quot;</span> + sum1);</span><br><span class="line">        System.out.println(<span class="string">&quot;sum2 = &quot;</span> + sum2);</span><br><span class="line">        System.out.println(<span class="string">&quot;sum3 = &quot;</span> + sum3);</span><br><span class="line">        System.out.println(<span class="string">&quot;sum4 = &quot;</span> + sum4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思索一下，是不是sum1, sum2, sum3, sum4均输出2147483648呢？</p><p>下面是代码运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum1 = -<span class="number">2147483648</span></span><br><span class="line">sum2 = -<span class="number">2147483648</span></span><br><span class="line">sum3 = <span class="number">2147483648</span></span><br><span class="line">sum4 = <span class="number">2147483648</span></span><br></pre></td></tr></table></figure><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>看似sum1, sum2, sum3, sum4均计算2147483647 + 1的结果，并且结果用 <b>long</b> 类型接收，但为什么会有两种不同计算结果呢？</p><ol><li>sum1计算的是a + b1，其中a和b1均为int类型数据。计算顺序是这样的：首先取表达式中最大的类型暂存计算结果，也就是int类型暂存a + b1的结果，显然会发生溢出，暂存的结果就为-2147483648；然后再将暂存的结果赋值给sum1，其中会向上隐式转型，于是sum1 &#x3D; -2147483648。</li><li>sum2计算的是两个字面量值的和。在Java中，纯数字字面量默认类型为int（在整数后加L表示long类型，例如12L表示long类型的12），因此，sum2的计算效果同sum1。</li><li>sum3与sum1唯一的区别就是，其中b2的类型变为long（值保持不变）。因此在计算时，会将a向上转型为long，再做long类型之间的运算，运算结果为long类型，最后再赋值给sum3。这一系列操作自然不会发生溢出。</li><li>sum4表达式中的字面量1L为long类型，计算效果同sum3，不会发生溢出。</li></ol><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>在Java中，如果赋值语句的右边是表达式，可以将该语句看成三个执行过程。</p><ol><li>将表达式中所有变量或字面量隐式向上转型为其中的最大类型；</li><li>用计算式中的最大类型暂存计算结果；</li><li>将暂存的结果赋值给左侧变量，如果暂存类型与左侧变量类型不一致，需要做显式（向下转型）或隐式（向上转型）的类型转换。</li></ol><p>转自：<a href="https://blog.csdn.net/huwei1844352682/article/details/106632488">https://blog.csdn.net/huwei1844352682/article/details/106632488</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;抛出问题&quot;&gt;&lt;a href=&quot;#抛出问题&quot; class=&quot;headerlink&quot; title=&quot;抛出问题&quot;&gt;&lt;/a&gt;抛出问题&lt;/h2&gt;&lt;p&gt;先来看一个代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一段旅程</title>
    <link href="http://example.com/2020/10/22/%E5%8D%81%E4%B8%80%E8%90%A5/"/>
    <id>http://example.com/2020/10/22/%E5%8D%81%E4%B8%80%E8%90%A5/</id>
    <published>2020-10-21T16:00:00.000Z</published>
    <updated>2022-05-14T02:10:47.771Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="no Permissions." data-whm="can not Verify.">  <script id="hbeData" type="hbeData" data-hmacdigest="7a1aeb2f442b99835985f3d88f10d8c87999d1e109dea14cde3f6c087b755ebf">5fffa82629056a2726735ceb0192c9af00f26ea83b0d24ba75b73e114aa798022b783825ca1f2e69ad714a8e266e8c11b40b45bf835bd37391d397551e7b9b6db81242ae57ca8999f7019815e4acac00134b9b866eb9c2cad3a1674931f384512e84814711b804c8c1dc3c691cac5318dc186bcef4d777ec805431acb8b2029bfcb55f0fbaee362b3e7ccb69bcc22c851636f209344b8edf5a6fa77e842932cd7504359fe9b6f4a852623dcd9ae976d30f08671d4cd692b5a5a494e5cf445e0d21c2161f9260083baa1660a982d52c48c0ab11248a76103fa1c50d8942797cfe3276295753826b19b19f89f9b7d21f1350c3ad903c6b830d4fbf7d9683c0878de81a5bdf1af5c962d87184167cbe00c55c28e35a94b7a749575446479695d9aecfaf5fff25d35c14c9749e760dc7ca42f977cd3ceb9efe15bc5622c5c55510437cd3f51fd516a069c5c6737b0a85ac68b7c3cb37b5f045e2a7d71f290a4a8e5c8791e5d7f1f4ea1746492cbd26deb2637a299e3bbde488bed10867a8393de447b67f2db7b5c1f98c559f75fce5e0adf6236a9ddcfb80c02dc4c134413c54cff47beb0a86924818618342fcf3835e36e82ed8b2babe9faf7ec46d63e03616a591b58f290f08afa7d86801bf45f9a4dec4914c166f9419716c6bfbf93e1efd56e92132f58061464734168159d39b8fa85608007513230d3f9c49e532b79259a981280b266fc30957b2388c2b22ab7ecade9a87f370a6f7c64a992b57bd90a294bb229cdd84f0780ab2356def1d49fad9280f86bc01dfe2fb06a3627f833da9579162cddad3d5389abf043bf48bfde35be227c569e7e14d7955872485454b80b41e172580489b5c44e6286c6dfde359182af220db62f1f4ddf06a2dccbfd992c4d084c22e2e5456d6fae57ef39beecc0679ecac7e6f451e3bea9ff6b8d64b7d55ceca4ee50862dc7462b03207e0584a2222873980eb42a40c47eee16b1b81ddb10014387dfcc446bb62c59395055a567d4c21c6cd7bc85be3b25c04839643ccc9a0cb4459e19b5c6141d1b3e59f5ca4171d7d2feee6b955e245da90d8c7d72faa8b7d6222e2e11c5f6aab80c07069918551f40cebb18a6d0d295cafe196ff411dc23f23127c1684949c1f5bf2b248a17508ebb64a4ed1713f573074a12f7c021c01331fc5482988544a6a421a79e5ebb825b5529a172df498d686a2b3f4248a8ef70615b1c7cce1dae551bb081d6143c2dbbeeb44b97418fb3ec3c6f8450ec9123994c864d4c92e0f0b9ae7ab6af11dfd9a340ae503711e2ba8be46e43034bf89909b20ead434683af21390c8acd448aaf28a084c40bfa7ba43819d4bb9b46d8904f3d1ebd7b536ad7b8175bfc384b86b32b73bf42f4cb7a0170cc05c6c50b87299b5234432f810206fcbe6d646475470a96dad332e408010c0e650afe0ff007af8dfbf16115cd978d1d4c32e9c2540c86f33a089f62e100d516e3302196d886c162468713fcba0a867b09d6c4e0a731f4803180002b41af5617103793bca4a66465acdce1b535a0c6318ef4e754ea30c31b4dd9ffac4e8e8354da667ef001d00d21337cc431546e3737686cfe6619d0e8bfbb94b49df5a37aaa9e6329301cbe44dc4a53834b671afa2bd5524a04a659671583fe293126b2185648fd3912ada1123ad72cea727325626bdce3bfd4e87032b45129ba4915816ec9569e9e07ab0370cea061a97fc1000fb56816f7376d9c7b4f67b598de79289c2941d607e0d82fe8fff0e7ede9e57c7dcc878792e72b55c09d33b501c823fd8cb95f58e4b2b6468010fd27b581e206fb104839991f6f524813e724cbff2c2f7ab3a8f14ba3380daa78ae0735e5ee5afa09c8cb8dbb85240e82ed058ac7cca6732929ba2fd8dd51150606ddf96588016081b4ecd9f9ba1165e60ca85281f7f0b9ecc605a3b5bb6b06221950337d68f8ab0d04e2f177edf32ccc3ba29f33778d6b37623ba0295c553c885d87fa0225c19df0c24a5746d1c6cc4e22346c35173a072f9409ea712e8fe802d95da065fc2dace537255f044833f13852a34a04a9153823c502d7a05593811f4b8ded6c2edfa8aa1c96775f7d4a1bcd7947fd4adaeb64d80f46dd39dbbf172677d846cb0309d47a965b3de3d3b3b8372695c900ebc774a380dee47bf62d60c65a1083dcb45887bc5890a62d8777e19ccec73d7f32e9220e2952a5a5bd7ec1a9b125d8f0d58c0cae31f83bb45c0234ab9686672bbafe9f920bf150e361e80be22608c42f760ffbbd3767e5008e2e02477a48a4f463b356b370c862cab5f33c2d9e6ee8840a91bdb0bf798f611c611c3d85ff293e7f1dcb00bc27950b217de3413a054d70ab819990b36700b188d301b27fd5335d2a11326d0cfe876a9b40f867db0a113b3c7a26d22a52361bdbe839e57dac0faa3746f7bab4731b2b16ecadbbb5b190cbe8660b288e2ad30064305014716c323e35ad282ebe5cbd62a9ab212fb5dcdc271d2eb0bcbfc9d7fa6486339f2bbe9dbbd456a6e9cc5213fe5255bac694f62aa0a4c44c81dd4504183fdd884d5c97debca9a46e6d91c0150a224b58b55023c69ef26e9ccbe802e4935fd9f05d8facb49fdfebf43773c3f371b2cf812dbddbf7dda65723b0609ef9fe5474562010c5f9c7fa4dc458281c75a1e2884db1a40940129948c20635551ff237c489a16b81e1447c0cdd2c2b629af6d07cebe45de25c340d6c2c8331f184a3473a2d87a1769e2137dc50c928bacff7c43d85b9f9cec89928fbc92ea8b3b097b93941bc6566cc156d0afd1d8b5b29966ddb26d3b8e57be41e5dd1387e3f5568789cc44eb80eb5b4e93ab033ba199d81a928c53c961621a4c6aeec1b30643cee3b7cba4fbda0d2c5f8a3369abd40e68e39fd4aca58eee5f5213093221fe867fb506ab3ed3df7e753b154f192324f38ecc7454dfaa85bbc5e74b15da943944053e9bef602e62b84e6331067a2c266ea5858729414776a62d5555e1d718f9c229c6e12f678554c3fc8a71962255c6aa15377d45fbe4b59d8ebd87efd087f663653fe20eba9c42c232d83f39f54748f6a584a3b416adbaa64d44175d2d08bf8f65813a9d5a7ef5ec11113d52e1bfe2df1043930ceb8667e686975f37ec4869c0a83577932f8c83584b1a1c452dca407f5f152954837e00565a06b94efc5de1859cce859a06f5b0f732bda66e76b61fe0d2651429c4814cd83468a2a2f1dd6a82149887f18cfda0be420cd704ad666f3509080bdd511011a4118f088968cb3f9f34da8c76e8202dcfd726a0f75d26163558a4c53260ce6cab02a3511f53c26cceb228d12e35885598903a7e9e621dc3dfb4c3b38c924ab847053eadafa2992f7bf4ecf6f995e34ffc5187432ae2883ecec101522984141186d6f6cd562f4d9bd4dbfeda52a5e2e6969171a631616a1f06d10e897d4eeebaa8440253368b54467765cabd16ee3f2aa5c3d3175ee9cb8c40b8c667539f9de89324f77e89efb531040c1c2b5dfa444d18411d4c11ccb4b02f55329472167961efd1c42cf2f4cbcdcb2477d2da69407079cd258961b35017b83746daf68068a4378c42091e7ccc184ad72fd5662abd6aee9f9e4e350bcc43f8da39da72e27c4be2be9152302892aefd50449ed6d3543e6a861f14aad1b2fa542c858ae50625d47f8884d3ff585f0f583500b2d9ebf135c0381a40c1320c0977ff3917bcdfda18227b15934146ec8ca1618de8416c85eb857095247b668e75e63eb1e9ac4254a3805be9608a51447a3ac81dcc838292ee75280bb52086d9fb6b520185c53cecf7288a54135cc3d641544a5e92f0d500a285b855ad6a684a7f36d671814579</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Please enter password to read</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Please enter password to read</summary>
    
    
    
    
    <category term="Essay" scheme="http://example.com/tags/Essay/"/>
    
  </entry>
  
  <entry>
    <title>遇</title>
    <link href="http://example.com/2018/10/05/%E9%81%87/"/>
    <id>http://example.com/2018/10/05/%E9%81%87/</id>
    <published>2018-10-04T16:00:00.000Z</published>
    <updated>2022-05-14T02:05:14.135Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="no Permissions." data-whm="can not Verify.">  <script id="hbeData" type="hbeData" data-hmacdigest="8be96cd999ff4a6d60d813fb3f3bf3f6281f2b048dcb079f1013d5ce71abb7cf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Please enter password to read</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Please enter password to read</summary>
    
    
    
    
    <category term="Essay" scheme="http://example.com/tags/Essay/"/>
    
  </entry>
  
</feed>
